###############################################################################
#
# IAR C/C++ Compiler V8.10.3.1087/W32 for MSP430          14/Feb/2025  17:40:59
# Copyright 1996-2023 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for MSP430, Evaluation version 8.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\rache\Desktop\BareMetal_IoTCar\main.c
#    Command line  =  
#        -f C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\main.r43.rsp
#        (C:\Users\rache\Desktop\BareMetal_IoTCar\main.c -lC
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\ -o
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large) --dependencies=n
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\main.r43.iar_deps
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\main.lst
#    Object file   =  
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\main.r43
#
###############################################################################

C:\Users\rache\Desktop\BareMetal_IoTCar\main.c
      1          //******************************************************************************
      2          //   Name: main.c
      3          //   Author: Rachel E. Williams
      4          //   Date Created: September 9 2015 (9/9/2015)
      5          //   Last Updated: 2/14/2025
      6          //   Description: This file contains the main routine to run the entire project
      7          //                using while(1) "Super Loop" architecture
      8          //   
      9          //******************************************************************************   
     10          
     11          // #includes 
     12          #include "msp430.h"
     13          #include "functions.h"
     14          #include "macros.h"
     15          
     16          // Global Variables 

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile char one_time; 
   \                     one_time:
   \   000000                DS8 1
     19          
     20          // For display 

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          char posL1;
   \                     posL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          char posL2;
   \                     posL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          char posL3;
   \                     posL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          char posL4;
   \                     posL4:
   \   000000                DS8 1
     25          
     26          // For timers 

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          volatile unsigned int milli_counter;
   \                     milli_counter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          volatile unsigned int milli_counter2; 
   \                     milli_counter2:
   \   000000                DS8 2
     29          
     30          // For ADC 

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          volatile unsigned int chng_channel; 
   \                     chng_channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          volatile unsigned int ADC_Right_Detector; 
   \                     ADC_Right_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          volatile unsigned int ADC_Left_Detector;
   \                     ADC_Left_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          volatile unsigned int ADC_Thumb; 
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          int temp;
   \                     temp:
   \   000000                DS8 2
     36          
     37          // For serial communication 

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          volatile unsigned int cpu_rx_ring_wr;
   \                     cpu_rx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          volatile unsigned int cpu_rx_ring_rd;
   \                     cpu_rx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          volatile unsigned int cpu_tx_ring_wr;
   \                     cpu_tx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          volatile unsigned int cpu_tx_ring_rd;
   \                     cpu_tx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          volatile char CPU_Char_Rx[SMALL_RING_SIZE];
   \                     CPU_Char_Rx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          volatile char CPU_Char_Tx[SMALL_RING_SIZE];
   \                     CPU_Char_Tx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          int diff;
   \                     diff:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          _Bool enabled_RX;
   \                     enabled_RX:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          char temp1;
   \                     temp1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          _Bool tens; 
   \                     tens:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          _Bool hundreds; 
   \                     hundreds:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          char tens_num;
   \                     tens_num:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          char hundreds_num;
   \                     hundreds_num:
   \   000000                DS8 1
     51          
     52          // For IOT communication 

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     53          volatile unsigned int usb_rx_ring_wr;
   \                     usb_rx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     54          volatile unsigned int usb_rx_ring_rd;
   \                     usb_rx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     55          volatile unsigned int usb_tx_ring_wr;
   \                     usb_tx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     56          volatile unsigned int usb_tx_ring_rd;
   \                     usb_tx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     57          volatile char USB_Char_Rx[SMALL_RING_SIZE];
   \                     USB_Char_Rx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     58          volatile char USB_Char_Tx[SMALL_RING_SIZE];
   \                     USB_Char_Tx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     59          volatile char IOT_Char_Rx[SMALL_RING_SIZE];
   \                     IOT_Char_Rx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     60          unsigned menu_type;
   \                     menu_type:
   \   000000                DS8 2
     61          
     62          // Constant Variables 
     63          

   \                                 In  segment CODE, align 2
     64          void main(void)
   \                     main:
     65          {
     66              Init_Ports();                        // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
     67              Init_Clocks();                       // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
     68              Init_Conditions();                   // Initialize and enable Interrupts
   \   000008   ........     CALLA   #Init_Conditions
     69              Time_Sequence = ORIGINAL;             
   \   00000C   8243....     MOV.W   #0x0, &Time_Sequence
     70              Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     71              Five_Msec_Delay(BOOT_DELAY);
   \   000014   3C401900     MOV.W   #0x19, R12
   \   000018   ........     CALLA   #Five_Msec_Delay
     72              Init_LCD();                          // Initialize LCD screen
   \   00001C   ........     CALLA   #Init_LCD
     73              ADC_Process();                       // Configuring for ADC 
   \   000020   ........     CALLA   #ADC_Process
     74              Init_Serial_UCA0(); 
   \   000024   ........     CALLA   #Init_Serial_UCA0
     75              Init_Serial_UCA1();                  // Initialize ports for serial comms 
   \   000028   ........     CALLA   #Init_Serial_UCA1
     76           
     77              // Turning off all motors at initialization 
     78              Left_Reverse_Off(); 
   \   00002C   ........     CALLA   #Left_Reverse_Off
     79              Right_Reverse_Off(); 
   \   000030   ........     CALLA   #Right_Reverse_Off
     80            
     81              // Initializing counters for interrupt timers 
     82              milli_counter = ORIGINAL;
   \   000034   8243....     MOV.W   #0x0, &milli_counter
     83              milli_counter2 = ORIGINAL;
   \   000038   8243....     MOV.W   #0x0, &milli_counter2
     84            
     85              // Initializing variables for thumb wheel 
     86              chng_channel = ORIGINAL;
   \   00003C   8243....     MOV.W   #0x0, &chng_channel
     87              temp = ORIGINAL;
   \   000040   8243....     MOV.W   #0x0, &temp
     88              diff = ORIGINAL;
   \   000044   8243....     MOV.W   #0x0, &diff
     89              tens = ORIGINAL;
   \   000048   C243....     MOV.B   #0x0, &tens
     90              hundreds = ORIGINAL;
   \   00004C   C243....     MOV.B   #0x0, &hundreds
     91              enabled_RX=POSIT_0;
   \   000050   C243....     MOV.B   #0x0, &enabled_RX
     92              temp1 = NUM_BASE;
   \   000054   F2403000.... MOV.B   #0x30, &temp1
     93              tens_num = NUM_BASE;
   \   00005A   F2403000.... MOV.B   #0x30, &tens_num
     94              hundreds_num = NUM_BASE;
   \   000060   F2403000.... MOV.B   #0x30, &hundreds_num
     95              menu_type = ORIGINAL;
   \   000066   8243....     MOV.W   #0x0, &menu_type
     96              lcd_BIG_mid();
   \   00006A   ........     CALLA   #lcd_BIG_mid
     97             
     98              // Initial display 
     99              display_1 = "Rachel";
   \   00006E   B240........ MOV.W   #`?<Constant "Rachel">`, &display_1
    100              posL1 = POSIT_2;
   \   000074   E243....     MOV.B   #0x2, &posL1
    101              display_2 = "PROJECT 8";
   \   000078   B240........ MOV.W   #`?<Constant "PROJECT 8">`, &display_2
    102              posL2 = POSIT_0;
   \   00007E   C243....     MOV.B   #0x0, &posL2
    103              display_3 = "Williams";
   \   000082   B240........ MOV.W   #`?<Constant "Williams">`, &display_3
    104              posL3 = POSIT_1;
   \   000088   D243....     MOV.B   #0x1, &posL3
    105              Out_To_LCD(display_1,posL1,display_2,posL2,display_3,posL3,display_4,posL4); 
   \   00008C   5F42....     MOV.B   &posL4, R15
   \   000090   4F4F         MOV.B   R15, R15
   \   000092   0F12         PUSH.W  R15
   \   000094   1212....     PUSH.W  &display_4
   \   000098   5F42....     MOV.B   &posL3, R15
   \   00009C   4F4F         MOV.B   R15, R15
   \   00009E   0F12         PUSH.W  R15
   \   0000A0   1212....     PUSH.W  &display_3
   \   0000A4   5F42....     MOV.B   &posL2, R15
   \   0000A8   4F4F         MOV.B   R15, R15
   \   0000AA   1E42....     MOV.W   &display_2, R14
   \   0000AE   5D42....     MOV.B   &posL1, R13
   \   0000B2   4D4D         MOV.B   R13, R13
   \   0000B4   1C42....     MOV.W   &display_1, R12
   \   0000B8   ........     CALLA   #Out_To_LCD
    106              Display_Process(); 
   \   0000BC   ........     CALLA   #Display_Process
   \   0000C0   A1000800     ADDA    #0x8, SP
    107            
    108          //------------------------------------------------------------------------------
    109          // Begining of the While "Super Loop" Operating System
    110          //------------------------------------------------------------------------------
    111              while(ALWAYS) 
    112              {                            // Can the Operating system run
    113                switch(Time_Sequence)
   \                     ??main_0:
   \   0000C4   1F42....     MOV.W   &Time_Sequence, R15
   \   0000C8   3F803200     SUB.W   #0x32, R15
   \   0000CC   0B24         JEQ     ??main_2
   \   0000CE   3F803200     SUB.W   #0x32, R15
   \   0000D2   0824         JEQ     ??main_2
   \   0000D4   3F803200     SUB.W   #0x32, R15
   \   0000D8   0524         JEQ     ??main_2
   \   0000DA   3F803200     SUB.W   #0x32, R15
   \   0000DE   0224         JEQ     ??main_2
   \   0000E0   3F803200     SUB.W   #0x32, R15
    114                {
    115                  case 250:                               // 1000 msec  
    116                    /*if(one_time){
    117                    Init_LEDs();                        // Initialize LEDs
    118                    one_time = 0;
    119                    }
    120                    Time_Sequence = 0;*/                    // 
    121                  case 200:                               // 1000 msec  
    122                    /*if(one_time){
    123                    PJOUT |= LED4;                      // Change State of LED 4
    124                    P3OUT |= LED5;                      // Change State of LED 5
    125                    one_time = 0;
    126                    }*/
    127                  case 150:                               // 750 msec  
    128                    /*if(one_time){
    129                    PJOUT |= LED3;                      // Change State of LED 3
    130                    P3OUT |= LED6;                      // Change State of LED 6
    131                    one_time = 0;
    132                    }*/
    133                  case 100:                               // 500 msec  
    134                    /*if(one_time){
    135                    PJOUT |= LED2;                      // Change State of LED 2
    136                     P3OUT |= LED7;                      // Change State of LED 7
    137                     one_time = 0;
    138                    }*/
    139                  case  50:                               // 250 msec  
    140                    /*if(one_time){
    141                    PJOUT |= LED1;                      // Change State of LED 1
    142                    P3OUT |= LED8;                      // Change State of LED 8
    143                    one_time = 0;
    144                    }*/
    145                     break;                                // 
    146                  default: break; 
    147                }
    148                Switches_Process();                       // Check for switch state change 
   \                     ??main_2:
   \   0000E4   ........     CALLA   #Switches_Process
    149                if(Time_Sequence > 250)
   \   0000E8   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   0000EE   EA2B         JNC     ??main_0
    150                {
    151                  Time_Sequence = 0;
   \   0000F0   8243....     MOV.W   #0x0, &Time_Sequence
   \   0000F4   E73F         JMP     ??main_0
   \   0000F6   0343         NOP
    152                }
    153              }  
    154          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Rachel">`:
   \   000000   52616368656C DC8 "Rachel"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "PROJECT 8">`:
   \   000000   50524F4A4543 DC8 "PROJECT 8"
   \            54203800    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Williams">`:
   \   000000   57696C6C6961 DC8 "Williams"
   \            6D7300      
    155          //------------------------------------------------------------------------------
    156          // End of the While "Super Loop" Operating System
    157          //------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   main
        4   -> ADC_Process
       12   -> Display_Process
        4   -> Five_Msec_Delay
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Serial_UCA0
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> Left_Reverse_Off
       12   -> Out_To_LCD
        4   -> Right_Reverse_Off
        4   -> Switches_Process
        4   -> lcd_BIG_mid


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "PROJECT 8">
       7  ?<Constant "Rachel">
       9  ?<Constant "Williams">
       2  ADC_Left_Detector
       2  ADC_Right_Detector
       2  ADC_Thumb
      40  CPU_Char_Rx
      40  CPU_Char_Tx
      40  IOT_Char_Rx
       2  Time_Sequence
      40  USB_Char_Rx
      40  USB_Char_Tx
       2  chng_channel
       2  cpu_rx_ring_rd
       2  cpu_rx_ring_wr
       2  cpu_tx_ring_rd
       2  cpu_tx_ring_wr
       2  diff
       1  enabled_RX
       1  hundreds
       1  hundreds_num
     248  main
       2  menu_type
       2  milli_counter
       2  milli_counter2
       1  one_time
       1  posL1
       1  posL2
       1  posL3
       1  posL4
       2  temp
       1  temp1
       1  tens
       1  tens_num
       2  usb_rx_ring_rd
       2  usb_rx_ring_wr
       2  usb_tx_ring_rd
       2  usb_tx_ring_wr

 
 248 bytes in segment CODE
  26 bytes in segment DATA16_C
 247 bytes in segment DATA16_Z
 
 248 bytes of CODE  memory
  26 bytes of CONST memory
 247 bytes of DATA  memory

Errors: none
Warnings: none
