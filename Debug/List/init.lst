###############################################################################
#
# IAR C/C++ Compiler V8.10.3.1087/W32 for MSP430          17/Feb/2025  13:30:45
# Copyright 1996-2023 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for MSP430, Evaluation version 8.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\rache\Desktop\BareMetal_IoTCar\init.c
#    Command line  =  
#        -f C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\init.r43.rsp
#        (C:\Users\rache\Desktop\BareMetal_IoTCar\init.c -lC
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\ -o
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large) --dependencies=n
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\init.r43.iar_deps
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\init.lst
#    Object file   =  
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\init.r43
#
###############################################################################

C:\Users\rache\Desktop\BareMetal_IoTCar\init.c
      1          //******************************************************************************
      2          //   Name: init.c
      3          //   Author: Rachel E. Williams
      4          //   Date Created: September 9 2015 (9/9/2015)
      5          //   Last Updated: 2/15/2025
      6          //   Description: This file contains the configuration and initialization for
      7          //                interrupts, Timers, ADC, and UART
      8          //   Originally built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //   Updated revisions built with IAR Embedded Workbench - MSP430 V8.10.3
     10          //******************************************************************************   
     11          
     12          // #includes 
     13          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADC10CTL0_L
   \                     _A_ADC10CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADC10CTL1_L
   \                     _A_ADC10CTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> _A_PASEL0_L
   \                     _A_PASEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20c
   \   union <unnamed> _A_PASEL1_L
   \                     _A_PASEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x340
   \   unsigned short volatile TA0CTL
   \                     TA0CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   unsigned short volatile TA0CCTL0
   \                     TA0CCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x360
   \   unsigned short volatile TA0EX0
   \                     TA0EX0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c0
   \   union <unnamed> _A_UCA0CTLW0_L
   \                     _A_UCA0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c6
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c8
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5da
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e0
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e6
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e8
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     14          #include "functions.h"
     15          #include "macros.h"
     16          
     17          // Global Variables 
     18          
     19          // Constant Variables
     20          
     21          //------------------------------------------------------------------------------
     22          //      Function name: Init_Conditions
     23          //      Description: Initialization configurations for interrupts and
     24          //                   display features
     25          //      Global variables: NONE
     26          //      Local variables: NONE
     27          //      Return: VOID
     28          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     29          void Init_Conditions(void){
   \                     Init_Conditions:
     30            // Interrupts are disabled by default, they are enabled here  
     31            enable_interrupts();
   \   000000   ........     CALLA   #enable_interrupts
     32            display_1 = &display_line_1[INIT_ARRAY];
   \   000004   B240........ MOV.W   #display_line_1, &display_1
     33            display_2 = &display_line_2[INIT_ARRAY];
   \   00000A   B240........ MOV.W   #display_line_2, &display_2
     34            display_3 = &display_line_3[INIT_ARRAY];
   \   000010   B240........ MOV.W   #display_line_3, &display_3
     35            display_4 = &display_line_4[INIT_ARRAY];
   \   000016   B240........ MOV.W   #display_line_4, &display_4
     36          }
   \   00001C   1001         RETA
     37          
     38          //------------------------------------------------------------------------------
     39          //      Function name: Init_Timers
     40          //      Description: Initializes all timers. Timers not used for the project are
     41          //                   commented
     42          //      Global variables: NONE
     43          //      Local variables: NONE
     44          //      Return: VOID
     45          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     46          void Init_Timers(void){
   \                     Init_Timers:
     47            Init_Timer_A0();     //
   \   000000   ........     CALLA   #Init_Timer_A0
     48            //  Init_Timer_A1(); // 
     49            //  Init_Timer_B0(); // 
     50            //  Init_Timer_B1(); //  
     51            Init_Timer_B2();     //  Required for instructor-provided compiled code to run
   \   000004   ........     CALLA   #Init_Timer_B2
     52          }
   \   000008   1001         RETA
     53          
     54          //------------------------------------------------------------------------------
     55          //      Function name: Init_Timer_A0
     56          //      Description: Initializes Timer A0, sets up both A0_0 and A0_1-A0_2
     57          //      Global variables: NONE
     58          //      Local variables: NONE
     59          //      Return: VOID
     60          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     61          void Init_Timer_A0(void) {
   \                     Init_Timer_A0:
     62            TA0CTL = TASSEL__SMCLK;    // SMCLK source
   \   000000   B24000024003 MOV.W   #0x200, &0x340
     63            TA0CTL |= TACLR;           // Resets TA0R, clock divider, count direction
   \   000006   A2D24003     BIS.W   #0x4, &0x340
     64            TA0CTL |= MC__CONTINOUS;   // Continuous up to 0xFFFH then back to 0
   \   00000A   B2D020004003 BIS.W   #0x20, &0x340
     65            TA0CTL |= ID__2;           // Divide clock by 2
   \   000010   B2D040004003 BIS.W   #0x40, &0x340
     66            TA0CTL &= ~TAIE;           // Disable Overflow Interrupt
   \   000016   A2C34003     BIC.W   #0x2, &0x340
     67            TA0CTL &= ~TAIFG;          // Clear Overflow Interrupt flag
   \   00001A   92C34003     BIC.W   #0x1, &0x340
     68            
     69            TA0EX0 = TAIDEX_7;         // Divide clock by an additional 8, index bit
   \   00001E   B24007006003 MOV.W   #0x7, &0x360
     70            
     71            TA0CCR0 = TA0CCR0_INTERVAL; // CCR0, time the timer counts up to 
   \   000024   B2407D005203 MOV.W   #0x7d, &0x352
     72            TA0CCTL0 |= CCIE;           // CCR0 enable interrupt, as soon as it's 
   \   00002A   B2D010004203 BIS.W   #0x10, &0x342
     73                                        //    initialized, interrupts will be enabled
     74          }
   \   000030   1001         RETA
   \   000032                REQUIRE TA0CTL
   \   000032                REQUIRE TA0EX0
   \   000032                REQUIRE TA0CCR0
   \   000032                REQUIRE TA0CCTL0
     75          
     76          //------------------------------------------------------------------------------
     77          //      Function name: ADC_Process
     78          //      Description: Configures system for analog-to-digital (ADC) ADC sampling 
     79          //                   and conversion for ADC channel 10
     80          //      Global variables: NONE
     81          //      Local variables: NONE
     82          //      Return: VOID
     83          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     84          void ADC_Process(void){
   \                     ADC_Process:
   \                     ??ADC_Process_0:
     85            while (ADC10CTL1 & BUSY);              // Wait if ADC10 core is active
   \   000000   92B30207     BIT.W   #0x1, &0x702
   \   000004   FD2F         JC      ??ADC_Process_0
     86            ADC10CTL0 |= ADC10ENC + ADC10SC;       // Sampling and conversion start
   \   000006   B2D003000007 BIS.W   #0x3, &0x700
     87          } 
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_ADC10CTL1_L
   \   00000E                REQUIRE _A_ADC10CTL0_L
     88          
     89          //------------------------------------------------------------------------------
     90          //      Function name: Init_Serial_UCA0
     91          //      Description: Initializing serial port for CPU communication 
     92          //      Global variables: CPU_Char_Rx, CPU_Char_Tx, cpu_rx_ring_wr,
     93          //                        cpu_rx_ring_rd, cpu_tx_ring_wr, cpu_tx_ring_rd
     94          //      Local variables: i 
     95          //      Return: VOID
     96          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     97          void Init_Serial_UCA0(void){
   \                     Init_Serial_UCA0:
     98            int i;
     99            for(i=POSIT_0; i<SMALL_RING_SIZE; i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA0_0:
   \   000002   3F902800     CMP.W   #0x28, R15
   \   000006   0434         JGE     ??Init_Serial_UCA0_2
    100              USB_Char_Rx[i] = ORIGINAL;                 // USB Rx Buffer
   \   000008   CF43....     MOV.B   #0x0, USB_Char_Rx(R15)
    101            }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??Init_Serial_UCA0_0
    102            usb_rx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA0_2:
   \   000010   8243....     MOV.W   #0x0, &usb_rx_ring_wr
    103            usb_rx_ring_rd = BEGINNING;
   \   000014   8243....     MOV.W   #0x0, &usb_rx_ring_rd
    104            
    105            for(i=ORIGINAL; i<SMALL_RING_SIZE; i++){ 
   \   000018   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA0_1:
   \   00001A   3F902800     CMP.W   #0x28, R15
   \   00001E   0434         JGE     ??Init_Serial_UCA0_3
    106              USB_Char_Tx[i] = CLEAR_REGISTER;          // USB Tx Buffer
   \   000020   CF43....     MOV.B   #0x0, USB_Char_Tx(R15)
    107            }
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   F93F         JMP     ??Init_Serial_UCA0_1
    108            usb_tx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA0_3:
   \   000028   8243....     MOV.W   #0x0, &usb_tx_ring_wr
    109            usb_tx_ring_rd = BEGINNING;
   \   00002C   8243....     MOV.W   #0x0, &usb_tx_ring_rd
    110            
    111            // Configure UART 0
    112            UCA0CTLW0 = POSIT_0;                         // Use word register
   \   000030   8243C005     MOV.W   #0x0, &0x5c0
    113            UCA0CTLW0 |= UCSSEL__SMCLK;                  // Set SMCLK as fBRCLK
   \   000034   B2D08000C005 BIS.W   #0x80, &0x5c0
    114            UCA0CTLW0 |= UCSWRST;                        // Set Software reset enable
   \   00003A   92D3C005     BIS.W   #0x1, &0x5c0
    115            UCA0BRW = B_RATE_9600;                       // 9,600 Baud
   \   00003E   B2403400C605 MOV.W   #0x34, &0x5c6
    116            UCA0MCTLW = UCA1MCTLW_DFLT;                  // UCA0MCTLW = UCSx concatenate 
   \   000044   B2401149C805 MOV.W   #0x4911, &0x5c8
    117                                                         //    UCFx concatenate UCOS16;
    118            
    119            // re-configuring ports 
    120            P2SEL0 &= ~USB_TXD;
   \   00004A   D2C30B02     BIC.B   #0x1, &0x20b
    121            P2SEL1 |= USB_TXD; 
   \   00004E   D2D30D02     BIS.B   #0x1, &0x20d
    122            P2OUT |= USB_TXD; 
   \   000052   D2D30302     BIS.B   #0x1, &0x203
    123            P2DIR |= USB_TXD; 
   \   000056   D2D30502     BIS.B   #0x1, &0x205
    124            
    125            P2SEL0 &= ~USB_RXD;
   \   00005A   E2C30B02     BIC.B   #0x2, &0x20b
    126            P2SEL1 |= USB_RXD;
   \   00005E   E2D30D02     BIS.B   #0x2, &0x20d
    127            P2OUT &= ~USB_RXD; 
   \   000062   E2C30302     BIC.B   #0x2, &0x203
    128            P2DIR &= ~USB_RXD;
   \   000066   E2C30502     BIC.B   #0x2, &0x205
    129            
    130            P2SEL1 |= CPU_TXD;
   \   00006A   F2D020000D02 BIS.B   #0x20, &0x20d
    131            P2SEL0 &= ~CPU_TXD;
   \   000070   F2C020000B02 BIC.B   #0x20, &0x20b
    132            P2OUT  |= CPU_TXD;
   \   000076   F2D020000302 BIS.B   #0x20, &0x203
    133            P2DIR  |= CPU_TXD;
   \   00007C   F2D020000502 BIS.B   #0x20, &0x205
    134            
    135            P2SEL1 |= CPU_RXD;
   \   000082   F2D040000D02 BIS.B   #0x40, &0x20d
    136            P2SEL0 &= ~CPU_RXD;
   \   000088   F2C040000B02 BIC.B   #0x40, &0x20b
    137            P2OUT &= ~CPU_RXD;
   \   00008E   F2C040000302 BIC.B   #0x40, &0x203
    138            P2DIR &= ~CPU_RXD;
   \   000094   F2C040000502 BIC.B   #0x40, &0x205
    139            
    140            UCA0CTL1 &= ~UCSWRST;                       // Release from reset
   \   00009A   D2C3C005     BIC.B   #0x1, &0x5c0
    141            UCA0IE |= UCRXIE;                           // Enable RX interrupt
   \   00009E   92D3DA05     BIS.W   #0x1, &0x5da
    142            UCA0IE |= UCTXIE;                           // Enable TX interrupt 
   \   0000A2   A2D3DA05     BIS.W   #0x2, &0x5da
    143          }
   \   0000A6   1001         RETA
   \   0000A8                REQUIRE _A_UCA0CTLW0_L
   \   0000A8                REQUIRE _A_UCA0BRW_L
   \   0000A8                REQUIRE _A_UCA0MCTLW_L
   \   0000A8                REQUIRE _A_PASEL0_L
   \   0000A8                REQUIRE _A_PASEL1_L
   \   0000A8                REQUIRE _A_PAOUT_L
   \   0000A8                REQUIRE _A_PADIR_L
   \   0000A8                REQUIRE _A_UCA0IE_L
    144          
    145          //------------------------------------------------------------------------------
    146          //      Function name: Init_Serial_UCA1
    147          //      Description: Initializing serial port for CPU communication 
    148          //      Global variables: CPU_Char_Rx, CPU_Char_Tx, cpu_rx_ring_wr,
    149          //                        cpu_rx_ring_rd, cpu_tx_ring_wr, cpu_tx_ring_rd
    150          //      Local variables: i 
    151          //      Return: VOID
    152          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    153          void Init_Serial_UCA1(void){
   \                     Init_Serial_UCA1:
    154            int i;
    155            for(i=ORIGINAL; i<SMALL_RING_SIZE; i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_0:
   \   000002   3F902800     CMP.W   #0x28, R15
   \   000006   0434         JGE     ??Init_Serial_UCA1_2
    156              CPU_Char_Rx[i] = CLEAR_REGISTER;          // CPU Rx Buffer
   \   000008   CF43....     MOV.B   #0x0, CPU_Char_Rx(R15)
    157            }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??Init_Serial_UCA1_0
    158            cpu_rx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA1_2:
   \   000010   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
    159            cpu_rx_ring_rd = BEGINNING;
   \   000014   8243....     MOV.W   #0x0, &cpu_rx_ring_rd
    160            
    161            for(i=ORIGINAL; i<SMALL_RING_SIZE; i++){ 
   \   000018   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_1:
   \   00001A   3F902800     CMP.W   #0x28, R15
   \   00001E   0434         JGE     ??Init_Serial_UCA1_3
    162              CPU_Char_Tx[i] = CLEAR_REGISTER;           // CPU Tx Buffer
   \   000020   CF43....     MOV.B   #0x0, CPU_Char_Tx(R15)
    163            }
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   F93F         JMP     ??Init_Serial_UCA1_1
    164            cpu_tx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA1_3:
   \   000028   8243....     MOV.W   #0x0, &cpu_tx_ring_wr
    165            cpu_tx_ring_rd = BEGINNING;
   \   00002C   8243....     MOV.W   #0x0, &cpu_tx_ring_rd
    166            
    167            // Configure UART 1
    168            UCA1CTLW0 = ORIGINAL;                       // Use word register
   \   000030   8243E005     MOV.W   #0x0, &0x5e0
    169            UCA1CTLW0 |= UCSSEL__SMCLK;                 // Set SMCLK as fBRCLK
   \   000034   B2D08000E005 BIS.W   #0x80, &0x5e0
    170            UCA1CTLW0 |= UCSWRST;                       // Set Software reset enable     
   \   00003A   92D3E005     BIS.W   #0x1, &0x5e0
    171            UCA1BRW = B_RATE_9600;                      // setting baud rate 
   \   00003E   B2403400E605 MOV.W   #0x34, &0x5e6
    172            UCA1MCTLW = UCA1MCTLW_DFLT;
   \   000044   B2401149E805 MOV.W   #0x4911, &0x5e8
    173            
    174            // Re-configuring ports 
    175            P2SEL0 &= ~USB_TXD;
   \   00004A   D2C30B02     BIC.B   #0x1, &0x20b
    176            P2SEL1 |= USB_TXD; 
   \   00004E   D2D30D02     BIS.B   #0x1, &0x20d
    177            P2OUT |= USB_TXD; 
   \   000052   D2D30302     BIS.B   #0x1, &0x203
    178            P2DIR |= USB_TXD; 
   \   000056   D2D30502     BIS.B   #0x1, &0x205
    179            
    180            P2SEL0 &= ~USB_RXD;
   \   00005A   E2C30B02     BIC.B   #0x2, &0x20b
    181            P2SEL1 |= USB_RXD;
   \   00005E   E2D30D02     BIS.B   #0x2, &0x20d
    182            P2OUT &= ~USB_RXD; 
   \   000062   E2C30302     BIC.B   #0x2, &0x203
    183            P2DIR &= ~USB_RXD;
   \   000066   E2C30502     BIC.B   #0x2, &0x205
    184            
    185            P2SEL1 |= CPU_TXD;
   \   00006A   F2D020000D02 BIS.B   #0x20, &0x20d
    186            P2SEL0 &= ~CPU_TXD;
   \   000070   F2C020000B02 BIC.B   #0x20, &0x20b
    187            P2OUT  |= CPU_TXD;
   \   000076   F2D020000302 BIS.B   #0x20, &0x203
    188            P2DIR  |= CPU_TXD;
   \   00007C   F2D020000502 BIS.B   #0x20, &0x205
    189            
    190            P2SEL1 |= CPU_RXD;
   \   000082   F2D040000D02 BIS.B   #0x40, &0x20d
    191            P2SEL0 &= ~CPU_RXD;
   \   000088   F2C040000B02 BIC.B   #0x40, &0x20b
    192            P2OUT &= ~CPU_RXD;
   \   00008E   F2C040000302 BIC.B   #0x40, &0x203
    193            P2DIR &= ~CPU_RXD;
   \   000094   F2C040000502 BIC.B   #0x40, &0x205
    194            
    195            // Reset release and interrupt enabling 
    196            UCA1CTL1 &= ~UCSWRST;                     // Release from reset
   \   00009A   D2C3E005     BIC.B   #0x1, &0x5e0
    197            UCA1IE |= UCRXIE;                         // Enable RX interrupt
   \   00009E   92D3FA05     BIS.W   #0x1, &0x5fa
    198            UCA1IE |= UCTXIE;                         // Enable TX interrupt 
   \   0000A2   A2D3FA05     BIS.W   #0x2, &0x5fa
    199          }
   \   0000A6   1001         RETA
   \   0000A8                REQUIRE _A_UCA1CTLW0_L
   \   0000A8                REQUIRE _A_UCA1BRW_L
   \   0000A8                REQUIRE _A_UCA1MCTLW_L
   \   0000A8                REQUIRE _A_PASEL0_L
   \   0000A8                REQUIRE _A_PASEL1_L
   \   0000A8                REQUIRE _A_PAOUT_L
   \   0000A8                REQUIRE _A_PADIR_L
   \   0000A8                REQUIRE _A_UCA1IE_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ADC_Process
      4   Init_Conditions
        4   -> enable_interrupts
      4   Init_Serial_UCA0
      4   Init_Serial_UCA1
      4   Init_Timer_A0
      4   Init_Timers
        4   -> Init_Timer_A0
        4   -> Init_Timer_B2


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ADC_Process
      30  Init_Conditions
     168  Init_Serial_UCA0
     168  Init_Serial_UCA1
      50  Init_Timer_A0
      10  Init_Timers
       2  TA0CCR0
       2  TA0CCTL0
       2  TA0CTL
       2  TA0EX0
       2  _A_ADC10CTL0_L
       2  _A_ADC10CTL1_L
       2  _A_PADIR_L
       2  _A_PAOUT_L
       2  _A_PASEL0_L
       2  _A_PASEL1_L
       2  _A_UCA0BRW_L
       2  _A_UCA0CTLW0_L
       2  _A_UCA0IE_L
       2  _A_UCA0MCTLW_L
       2  _A_UCA1BRW_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1MCTLW_L

 
 440 bytes in segment CODE
  36 bytes in segment DATA16_AN
 
 440 bytes of CODE memory
   0 bytes of DATA memory (+ 36 bytes shared)

Errors: none
Warnings: none
