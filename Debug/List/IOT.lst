###############################################################################
#
# IAR C/C++ Compiler V8.10.3.1087/W32 for MSP430          17/Feb/2025  14:31:37
# Copyright 1996-2023 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for MSP430, Evaluation version 8.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\rache\Desktop\BareMetal_IoTCar\IOT.c
#    Command line  =  
#        -f C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\IOT.r43.rsp
#        (C:\Users\rache\Desktop\BareMetal_IoTCar\IOT.c -lC
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\ -o
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large) --dependencies=n
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\IOT.r43.iar_deps
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\IOT.lst
#    Object file   =  C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\IOT.r43
#
###############################################################################

C:\Users\rache\Desktop\BareMetal_IoTCar\IOT.c
      1          //******************************************************************************
      2          //   Name: IOT.c
      3          //   Author: Rachel E. Williams
      4          //   Date Created: September 9 2015 (9/9/2015)
      5          //   Last Updated: 2/17/2025
      6          //   Description: This file handles configuration, initialization, and 
      7          //                functions for the IoT module 
      8          //   Originally built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //   Updated revisions built with IAR Embedded Workbench - MSP430 V8.10.3
     10          //******************************************************************************  
     11          
     12          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ce
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     13          #include "functions.h"
     14          #include "macros.h"
     15          
     16          //------------------------------------------------------------------------------
     17          //      Function name: IOT_config
     18          //      Description: Configuration for IOT device on NCSU wifi  
     19          //      Global variables: IOT_Char_Rx[]
     20          //      Local variables: i,j,k 
     21          //      Return: VOID
     22          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     23          void IOT_config(void){
   \                     IOT_config:
   \   000000   0A12         PUSH.W  R10
     24            int i = POSIT_0;
   \   000002   0A43         MOV.W   #0x0, R10
     25            
     26            Out_To_LCD(" ",POSIT_0," ",POSIT_0," ",POSIT_0," ",POSIT_0);
   \   000004   0312         PUSH.W  #0x0
   \   000006   3012....     PUSH.W  #`?<Constant " ">`
   \   00000A   0312         PUSH.W  #0x0
   \   00000C   3012....     PUSH.W  #`?<Constant " ">`
   \   000010   0F43         MOV.W   #0x0, R15
   \   000012   3E40....     MOV.W   #`?<Constant " ">`, R14
   \   000016   0D43         MOV.W   #0x0, R13
   \   000018   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   00001C   ........     CALLA   #Out_To_LCD
     27            lcd_4line();
   \   000020   ........     CALLA   #lcd_4line
     28            Display_Process(); 
   \   000024   ........     CALLA   #Display_Process
     29            Five_Msec_Delay(20); 
   \   000028   3C401400     MOV.W   #0x14, R12
   \   00002C   ........     CALLA   #Five_Msec_Delay
     30            
     31            //----------Set SSID---------------------------------------------------------- 
     32            Set_SSID(); 
   \   000030   ........     CALLA   #Set_SSID
   \   000034   A1000800     ADDA    #0x8, SP
     33            
     34            // Waiting until "OK" is received 
     35            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_0:
   \   000038   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   00003E   0224         JEQ     ??IOT_config_12
   \   000040   1A53         ADD.W   #0x1, R10
   \   000042   FA3F         JMP     ??IOT_config_0
     36            i = POSIT_0;
   \                     ??IOT_config_12:
   \   000044   0A43         MOV.W   #0x0, R10
     37            X_Seconds_Delay(POSIT_1);
   \   000046   1C43         MOV.W   #0x1, R12
   \   000048   ........     CALLA   #X_Seconds_Delay
     38            
     39            //----------Get SSID----------------------------------------------------------
     40            Get_SSID(); 
   \   00004C   ........     CALLA   #Get_SSID
     41            
     42            // Waiting until "OK" is received 
     43            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_1:
   \   000050   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   000056   0224         JEQ     ??IOT_config_13
   \   000058   1A53         ADD.W   #0x1, R10
   \   00005A   FA3F         JMP     ??IOT_config_1
     44            i = POSIT_0;
   \                     ??IOT_config_13:
   \   00005C   0A43         MOV.W   #0x0, R10
     45            X_Seconds_Delay(POSIT_1);
   \   00005E   1C43         MOV.W   #0x1, R12
   \   000060   ........     CALLA   #X_Seconds_Delay
     46              
     47            //----------Set host name----------------------------------------------------- 
     48            Set_HostN(); 
   \   000064   ........     CALLA   #Set_HostN
     49            
     50            // Waiting until "OK" is received 
     51            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_2:
   \   000068   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   00006E   0224         JEQ     ??IOT_config_14
   \   000070   1A53         ADD.W   #0x1, R10
   \   000072   FA3F         JMP     ??IOT_config_2
     52            i = POSIT_0;
   \                     ??IOT_config_14:
   \   000074   0A43         MOV.W   #0x0, R10
     53            X_Seconds_Delay(POSIT_1);
   \   000076   1C43         MOV.W   #0x1, R12
   \   000078   ........     CALLA   #X_Seconds_Delay
     54            
     55            //----------Get host name-----------------------------------------------------
     56            Get_HostN(); 
   \   00007C   ........     CALLA   #Get_HostN
     57            
     58            // Waiting until "OK" is received 
     59            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_3:
   \   000080   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   000086   0224         JEQ     ??IOT_config_15
   \   000088   1A53         ADD.W   #0x1, R10
   \   00008A   FA3F         JMP     ??IOT_config_3
     60            i = POSIT_0;
   \                     ??IOT_config_15:
   \   00008C   0A43         MOV.W   #0x0, R10
     61            X_Seconds_Delay(POSIT_1);
   \   00008E   1C43         MOV.W   #0x1, R12
   \   000090   ........     CALLA   #X_Seconds_Delay
     62            
     63            //----------Set network privacy mode------------------------------------------
     64            Set_NetP(); 
   \   000094   ........     CALLA   #Set_NetP
     65            
     66            // Waiting until "OK" is received 
     67            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_4:
   \   000098   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   00009E   0224         JEQ     ??IOT_config_16
   \   0000A0   1A53         ADD.W   #0x1, R10
   \   0000A2   FA3F         JMP     ??IOT_config_4
     68            i = POSIT_0;
   \                     ??IOT_config_16:
   \   0000A4   0A43         MOV.W   #0x0, R10
     69            X_Seconds_Delay(POSIT_1);
   \   0000A6   1C43         MOV.W   #0x1, R12
   \   0000A8   ........     CALLA   #X_Seconds_Delay
     70            
     71            //----------Get network privacy mode------------------------------------------ 
     72            Get_NetP(); 
   \   0000AC   ........     CALLA   #Get_NetP
     73            
     74            // Waiting until "OK" is received 
     75            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_5:
   \   0000B0   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   0000B6   0224         JEQ     ??IOT_config_17
   \   0000B8   1A53         ADD.W   #0x1, R10
   \   0000BA   FA3F         JMP     ??IOT_config_5
     76            i = POSIT_0;
   \                     ??IOT_config_17:
   \   0000BC   0A43         MOV.W   #0x0, R10
     77            X_Seconds_Delay(POSIT_1);
   \   0000BE   1C43         MOV.W   #0x1, R12
   \   0000C0   ........     CALLA   #X_Seconds_Delay
     78            
     79            //----------Set network mode-------------------------------------------------- 
     80            Set_NetM(); 
   \   0000C4   ........     CALLA   #Set_NetM
     81            
     82            // Waiting until "OK" is received 
     83            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_6:
   \   0000C8   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   0000CE   0224         JEQ     ??IOT_config_18
   \   0000D0   1A53         ADD.W   #0x1, R10
   \   0000D2   FA3F         JMP     ??IOT_config_6
     84            i = POSIT_0;
   \                     ??IOT_config_18:
   \   0000D4   0A43         MOV.W   #0x0, R10
     85            X_Seconds_Delay(POSIT_1); 
   \   0000D6   1C43         MOV.W   #0x1, R12
   \   0000D8   ........     CALLA   #X_Seconds_Delay
     86            
     87            //----------Get network mode-------------------------------------------------- 
     88            Get_NetM(); 
   \   0000DC   ........     CALLA   #Get_NetM
     89            
     90            // Waiting until "OK" is received 
     91            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_7:
   \   0000E0   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   0000E6   0224         JEQ     ??IOT_config_19
   \   0000E8   1A53         ADD.W   #0x1, R10
   \   0000EA   FA3F         JMP     ??IOT_config_7
     92            i = POSIT_0;
   \                     ??IOT_config_19:
   \   0000EC   0A43         MOV.W   #0x0, R10
     93            X_Seconds_Delay(POSIT_1); 
   \   0000EE   1C43         MOV.W   #0x1, R12
   \   0000F0   ........     CALLA   #X_Seconds_Delay
     94            
     95            //----------Save settings on flash module-------------------------------------
     96            Save_All(); 
   \   0000F4   ........     CALLA   #Save_All
     97            
     98            // Waiting until "OK" is received 
     99            while(IOT_Char_Rx[i] != 'O')i++;
   \                     ??IOT_config_8:
   \   0000F8   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   0000FE   0224         JEQ     ??IOT_config_20
   \   000100   1A53         ADD.W   #0x1, R10
   \   000102   FA3F         JMP     ??IOT_config_8
    100            i = POSIT_0;
   \                     ??IOT_config_20:
   \   000104   0A43         MOV.W   #0x0, R10
    101            X_Seconds_Delay(POSIT_1); 
   \   000106   1C43         MOV.W   #0x1, R12
   \   000108   ........     CALLA   #X_Seconds_Delay
    102            
    103            //----------Reset module------------------------------------------------------
    104            Reconnect(); 
   \   00010C   ........     CALLA   #Reconnect
    105            
    106            //---------Ping lab computer-------------------------------------------------- 
    107            Ping(); 
   \   000110   ........     CALLA   #Ping
    108            cpu_rx_ring_wr = POSIT_0;
   \   000114   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
    109            i = POSIT_0;
   \   000118   0A43         MOV.W   #0x0, R10
    110            X_Seconds_Delay(POSIT_1);
   \   00011A   1C43         MOV.W   #0x1, R12
   \   00011C   ........     CALLA   #X_Seconds_Delay
    111            
    112            // Waiting until "OK" has been received 
    113            i = POSIT_0;
   \   000120   0A43         MOV.W   #0x0, R10
    114            while(IOT_Char_Rx[i] != 'O')i++; 
   \                     ??IOT_config_9:
   \   000122   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   000128   0224         JEQ     ??IOT_config_21
   \   00012A   1A53         ADD.W   #0x1, R10
   \   00012C   FA3F         JMP     ??IOT_config_9
    115            X_Seconds_Delay(POSIT_1);
   \                     ??IOT_config_21:
   \   00012E   1C43         MOV.W   #0x1, R12
   \   000130   ........     CALLA   #X_Seconds_Delay
    116            i = POSIT_0;
   \   000134   0A43         MOV.W   #0x0, R10
    117            
    118            //---------Opening Socket-Server Connection-----------------------------------
    119            Socket(); 
   \   000136   ........     CALLA   #Socket
    120            
    121            // Waiting until "OK" has been received 
    122            i = POSIT_0;
   \   00013A   0A43         MOV.W   #0x0, R10
    123            while(IOT_Char_Rx[i] != 'O')i++; 
   \                     ??IOT_config_10:
   \   00013C   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   000142   0224         JEQ     ??IOT_config_22
   \   000144   1A53         ADD.W   #0x1, R10
   \   000146   FA3F         JMP     ??IOT_config_10
    124            X_Seconds_Delay(POSIT_1);
   \                     ??IOT_config_22:
   \   000148   1C43         MOV.W   #0x1, R12
   \   00014A   ........     CALLA   #X_Seconds_Delay
    125            i = POSIT_0;
   \   00014E   0A43         MOV.W   #0x0, R10
    126            
    127            while(!i){
   \                     ??IOT_config_11:
   \   000150   0A93         CMP.W   #0x0, R10
   \   000152   0720         JNE     ??IOT_config_23
    128              if (!(P4IN & SW2)){
   \   000154   E2B32102     BIT.B   #0x2, &0x221
   \   000158   FB2F         JC      ??IOT_config_11
    129                i = POSIT_1; 
   \   00015A   1A43         MOV.W   #0x1, R10
    130                Switches_Process(); 
   \   00015C   ........     CALLA   #Switches_Process
   \   000160   F73F         JMP     ??IOT_config_11
    131              }
    132            }
    133          }
   \                     ??IOT_config_23:
   \   000162   3A41         POP.W   R10
   \   000164   1001         RETA
   \   000166                REQUIRE _A_PBIN_L
    134          
    135          //------------------------------------------------------------------------------
    136          //      Function name: Listen
    137          //      Description: Configuration for IOT device on ncsu wifi  
    138          //      Global variables: IOT_Char_Rx
    139          //      Local variables: inc, i, j, time, t, result
    140          //      Return: VOID
    141          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    142          void Listen(void){
   \                     Listen:
   \   000000   3B15         PUSHM.W #0x4, R11
    143            int inc = POSIT_0;
   \   000002   0A43         MOV.W   #0x0, R10
    144            char j = '1'; 
   \   000004   7B403100     MOV.B   #0x31, R11
    145            unsigned int t; 
    146            _Bool result = POSIT_0;
   \   000008   4943         MOV.B   #0x0, R9
    147            
    148            while(!result){
   \                     ??Listen_0:
   \   00000A   4993         CMP.B   #0x0, R9
   \   00000C   0820         JNE     ??Listen_12
    149              // Checks if command sequence identifier is seen. If seen, returns 1, else 0
    150              result = Check_Str();
   \   00000E   ........     CALLA   #Check_Str
   \   000012   0C93         CMP.W   #0x0, R12
   \   000014   0224         JEQ     ??Listen_13
   \   000016   5943         MOV.B   #0x1, R9
   \   000018   F83F         JMP     ??Listen_0
   \                     ??Listen_13:
   \   00001A   4943         MOV.B   #0x0, R9
   \   00001C   F63F         JMP     ??Listen_0
    151            }
    152            
    153            Out_To_LCD("Waiting",POSIT_0,"For",POSIT_0,"Input...",POSIT_0," ",POSIT_0);
   \                     ??Listen_12:
   \   00001E   0312         PUSH.W  #0x0
   \   000020   3012....     PUSH.W  #`?<Constant " ">`
   \   000024   0312         PUSH.W  #0x0
   \   000026   3012....     PUSH.W  #`?<Constant "Input...">`
   \   00002A   0F43         MOV.W   #0x0, R15
   \   00002C   3E40....     MOV.W   #`?<Constant "For">`, R14
   \   000030   0D43         MOV.W   #0x0, R13
   \   000032   3C40....     MOV.W   #`?<Constant "Waiting">`, R12
   \   000036   ........     CALLA   #Out_To_LCD
    154            Display_Process();
   \   00003A   ........     CALLA   #Display_Process
    155            Five_Msec_Delay(BIG_DELAY);
   \   00003E   3C40F401     MOV.W   #0x1f4, R12
   \   000042   ........     CALLA   #Five_Msec_Delay
   \   000046   A1000800     ADDA    #0x8, SP
    156            
    157            // Continue to listen unless SW2 is pressed
    158            while(P4IN & SW2){
   \                     ??Listen_10:
   \   00004A   E2B32102     BIT.B   #0x2, &0x221
   \   00004E   2529         JNC     ??Listen_14
    159              
    160              // Turns off all motors (precaution) 
    161              All_Off(); 
   \   000050   ........     CALLA   #All_Off
    162              
    163              // re-initializing receive buffer
    164              for(int j1=POSIT_0; j1<SMALL_RING_SIZE; j1++)IOT_Char_Rx[j1]='1';
   \   000054   0F43         MOV.W   #0x0, R15
   \                     ??Listen_1:
   \   000056   3F902800     CMP.W   #0x28, R15
   \   00005A   0534         JGE     ??Listen_15
   \   00005C   FF403100.... MOV.B   #0x31, IOT_Char_Rx(R15)
   \   000062   1F53         ADD.W   #0x1, R15
   \   000064   F83F         JMP     ??Listen_1
    165              
    166              // default driving time for each command 
    167              t = 65;
   \                     ??Listen_15:
   \   000066   38404100     MOV.W   #0x41, R8
    168              
    169              // re-initializing variables 
    170              j = '1'; 
   \   00006A   7B403100     MOV.B   #0x31, R11
    171              inc = POSIT_0; 
   \   00006E   0A43         MOV.W   #0x0, R10
    172              
    173              // going through array to find appropriate driving commands 
    174              j = IOT_Char_Rx[inc];
   \   000070   5B4A....     MOV.B   IOT_Char_Rx(R10), R11
    175              
    176              switch(j){
   \   000074   4E4B         MOV.B   R11, R14
   \   000076   7E804100     SUB.B   #0x41, R14
   \   00007A   7424         JEQ     ??Listen_16
   \   00007C   6E83         SUB.B   #0x2, R14
   \   00007E   EA24         JEQ     ??Listen_17
   \   000080   5E83         SUB.B   #0x1, R14
   \   000082   4F24         JEQ     ??Listen_18
   \   000084   5E83         SUB.B   #0x1, R14
   \   000086   AC24         JEQ     ??Listen_19
   \   000088   7E800C00     SUB.B   #0xc, R14
   \   00008C   8C24         JEQ     ??Listen_20
   \   00008E   6E83         SUB.B   #0x2, R14
   \   000090   2724         JEQ     ??Listen_21
   \   000092   6E82         SUB.B   #0x4, R14
   \   000094   0424         JEQ     ??Listen_22
   \   000096   7E800300     SUB.B   #0x3, R14
   \   00009A   BF24         JEQ     ??Listen_23
   \   00009C   F73C         JMP     ??Listen_11
    177                
    178              //---------Forward motion--------------------------------------------------- 
    179              case 'W': 
    180                Out_To_LCD(" ",POSIT_0,"Forward",POSIT_0," ",POSIT_0," ",POSIT_0);
   \                     ??Listen_22:
   \   00009E   0312         PUSH.W  #0x0
   \   0000A0   3012....     PUSH.W  #`?<Constant " ">`
   \   0000A4   0312         PUSH.W  #0x0
   \   0000A6   3012....     PUSH.W  #`?<Constant " ">`
   \   0000AA   0F43         MOV.W   #0x0, R15
   \   0000AC   3E40....     MOV.W   #`?<Constant "Forward">`, R14
   \   0000B0   0D43         MOV.W   #0x0, R13
   \   0000B2   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   0000B6   ........     CALLA   #Out_To_LCD
    181                Display_Process();
   \   0000BA   ........     CALLA   #Display_Process
    182                
    183                // Reset timer for timer interrupt 
    184                Time_Sequence = POSIT_0;
   \   0000BE   8243....     MOV.W   #0x0, &Time_Sequence
   \   0000C2   A1000800     ADDA    #0x8, SP
    185                
    186                // Count up to time unit 
    187                while(Time_Sequence < t){  
   \                     ??Listen_2:
   \   0000C6   8298....     CMP.W   R8, &Time_Sequence
   \   0000CA   052C         JC      ??Listen_24
    188                  Left_Forward_On();
   \   0000CC   ........     CALLA   #Left_Forward_On
    189                  Right_Forward_On();
   \   0000D0   ........     CALLA   #Right_Forward_On
   \   0000D4   F83F         JMP     ??Listen_2
    190                }
    191                
    192                // Turning off after reached time unit 
    193                Left_Forward_Off();
   \                     ??Listen_24:
   \   0000D6   ........     CALLA   #Left_Forward_Off
    194                Right_Forward_Off();
   \   0000DA   ........     CALLA   #Right_Forward_Off
    195                break; 
   \   0000DE   D63C         JMP     ??Listen_11
    196                
    197              //---------Reverse motion--------------------------------------------------- 
    198              case 'S':  
    199                Out_To_LCD(" ",POSIT_0,"Reverse",POSIT_0," ",POSIT_0," ",POSIT_0);
   \                     ??Listen_21:
   \   0000E0   0312         PUSH.W  #0x0
   \   0000E2   3012....     PUSH.W  #`?<Constant " ">`
   \   0000E6   0312         PUSH.W  #0x0
   \   0000E8   3012....     PUSH.W  #`?<Constant " ">`
   \   0000EC   0F43         MOV.W   #0x0, R15
   \   0000EE   3E40....     MOV.W   #`?<Constant "Reverse">`, R14
   \   0000F2   0D43         MOV.W   #0x0, R13
   \   0000F4   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   0000F8   ........     CALLA   #Out_To_LCD
    200                Display_Process();
   \   0000FC   ........     CALLA   #Display_Process
    201                
    202                // Reset timer for timer interrupt
    203                Time_Sequence = POSIT_0;
   \   000100   8243....     MOV.W   #0x0, &Time_Sequence
   \   000104   A1000800     ADDA    #0x8, SP
    204                
    205                // Count up to time unit
    206                while(Time_Sequence < t){
   \                     ??Listen_3:
   \   000108   8298....     CMP.W   R8, &Time_Sequence
   \   00010C   052C         JC      ??Listen_25
    207                  Left_Reverse_On();
   \   00010E   ........     CALLA   #Left_Reverse_On
    208                  Right_Reverse_On();
   \   000112   ........     CALLA   #Right_Reverse_On
   \   000116   F83F         JMP     ??Listen_3
    209                }
    210                
    211                // Turning off after reached time unit
    212                Left_Reverse_Off();
   \                     ??Listen_25:
   \   000118   ........     CALLA   #Left_Reverse_Off
    213                Right_Reverse_Off();
   \   00011C   ........     CALLA   #Right_Reverse_Off
    214                break; 
   \   000120   B53C         JMP     ??Listen_11
    215                
    216              //---------Clockwise motion-------------------------------------------------  
    217              case 'D': 
    218                Out_To_LCD(" ",POSIT_0,"CW",POSIT_0," ",POSIT_0," ",POSIT_0);
   \                     ??Listen_18:
   \   000122   0312         PUSH.W  #0x0
   \   000124   3012....     PUSH.W  #`?<Constant " ">`
   \   000128   0312         PUSH.W  #0x0
   \   00012A   3012....     PUSH.W  #`?<Constant " ">`
   \   00012E   0F43         MOV.W   #0x0, R15
   \   000130   3E40....     MOV.W   #`?<Constant "CW">`, R14
   \   000134   0D43         MOV.W   #0x0, R13
   \   000136   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   00013A   ........     CALLA   #Out_To_LCD
    219                Display_Process();
   \   00013E   ........     CALLA   #Display_Process
    220                
    221                // Reset timer for timer interrupt
    222                Time_Sequence = POSIT_0;
   \   000142   8243....     MOV.W   #0x0, &Time_Sequence
   \   000146   A1000800     ADDA    #0x8, SP
    223                
    224                // Count up to time unit
    225                while(Time_Sequence < t){
   \                     ??Listen_4:
   \   00014A   8298....     CMP.W   R8, &Time_Sequence
   \   00014E   052C         JC      ??Listen_26
    226                  Left_Forward_On();
   \   000150   ........     CALLA   #Left_Forward_On
    227                  Right_Reverse_On();
   \   000154   ........     CALLA   #Right_Reverse_On
   \   000158   F83F         JMP     ??Listen_4
    228                }
    229                
    230                // Turning off after reached time unit
    231                Left_Forward_Off();
   \                     ??Listen_26:
   \   00015A   ........     CALLA   #Left_Forward_Off
    232                Right_Reverse_Off();
   \   00015E   ........     CALLA   #Right_Reverse_Off
    233                break; 
   \   000162   943C         JMP     ??Listen_11
    234                
    235              //---------Counterclockwise motion------------------------------------------        
    236              case 'A':  
    237                Out_To_LCD(" ",POSIT_0,"CCW",POSIT_0," ",POSIT_0," ",POSIT_0);
   \                     ??Listen_16:
   \   000164   0312         PUSH.W  #0x0
   \   000166   3012....     PUSH.W  #`?<Constant " ">`
   \   00016A   0312         PUSH.W  #0x0
   \   00016C   3012....     PUSH.W  #`?<Constant " ">`
   \   000170   0F43         MOV.W   #0x0, R15
   \   000172   3E40....     MOV.W   #`?<Constant "CCW">`, R14
   \   000176   0D43         MOV.W   #0x0, R13
   \   000178   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   00017C   ........     CALLA   #Out_To_LCD
    238                Display_Process();
   \   000180   ........     CALLA   #Display_Process
    239                
    240                // Reset timer for timer interrupt
    241                Time_Sequence = POSIT_0;
   \   000184   8243....     MOV.W   #0x0, &Time_Sequence
   \   000188   A1000800     ADDA    #0x8, SP
    242                
    243                // Count up to time unit
    244                while(Time_Sequence < t){
   \                     ??Listen_5:
   \   00018C   8298....     CMP.W   R8, &Time_Sequence
   \   000190   052C         JC      ??Listen_27
    245                  Left_Reverse_On();
   \   000192   ........     CALLA   #Left_Reverse_On
    246                  Right_Forward_On();
   \   000196   ........     CALLA   #Right_Forward_On
   \   00019A   F83F         JMP     ??Listen_5
    247                }
    248                // Turning off after reached time unit
    249                Left_Reverse_Off();
   \                     ??Listen_27:
   \   00019C   ........     CALLA   #Left_Reverse_Off
    250                Right_Forward_Off();
   \   0001A0   ........     CALLA   #Right_Forward_Off
    251                break; 
   \   0001A4   733C         JMP     ??Listen_11
    252                
    253              //--------Left Turn (forward)-----------------------------------------------       
    254              case 'Q':  
    255                Out_To_LCD(" ",POSIT_0,"Left",POSIT_0,"Turn",POSIT_0," ",POSIT_0);
   \                     ??Listen_20:
   \   0001A6   0312         PUSH.W  #0x0
   \   0001A8   3012....     PUSH.W  #`?<Constant " ">`
   \   0001AC   0312         PUSH.W  #0x0
   \   0001AE   3012....     PUSH.W  #`?<Constant "Turn">`
   \   0001B2   0F43         MOV.W   #0x0, R15
   \   0001B4   3E40....     MOV.W   #`?<Constant "Left">`, R14
   \   0001B8   0D43         MOV.W   #0x0, R13
   \   0001BA   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   0001BE   ........     CALLA   #Out_To_LCD
    256                Display_Process();
   \   0001C2   ........     CALLA   #Display_Process
    257                
    258                // Reset timer for timer interrupt
    259                Time_Sequence = POSIT_0;
   \   0001C6   8243....     MOV.W   #0x0, &Time_Sequence
   \   0001CA   A1000800     ADDA    #0x8, SP
    260                
    261                // Count up to time unit
    262                while(Time_Sequence < t){
   \                     ??Listen_6:
   \   0001CE   8298....     CMP.W   R8, &Time_Sequence
   \   0001D2   032C         JC      ??Listen_28
    263                  Right_Forward_On();
   \   0001D4   ........     CALLA   #Right_Forward_On
   \   0001D8   FA3F         JMP     ??Listen_6
    264                }
    265                // Turning off after reached time unit
    266                Right_Forward_Off();
   \                     ??Listen_28:
   \   0001DA   ........     CALLA   #Right_Forward_Off
    267                break; 
   \   0001DE   563C         JMP     ??Listen_11
    268                
    269              //---------Right Turn (forward)---------------------------------------------        
    270              case 'E': 
    271                Out_To_LCD(" ",POSIT_0,"Right",POSIT_0,"Turn",POSIT_0," ",POSIT_0);
   \                     ??Listen_19:
   \   0001E0   0312         PUSH.W  #0x0
   \   0001E2   3012....     PUSH.W  #`?<Constant " ">`
   \   0001E6   0312         PUSH.W  #0x0
   \   0001E8   3012....     PUSH.W  #`?<Constant "Turn">`
   \   0001EC   0F43         MOV.W   #0x0, R15
   \   0001EE   3E40....     MOV.W   #`?<Constant "Right">`, R14
   \   0001F2   0D43         MOV.W   #0x0, R13
   \   0001F4   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   0001F8   ........     CALLA   #Out_To_LCD
    272                Display_Process();
   \   0001FC   ........     CALLA   #Display_Process
    273                
    274                // Reset timer for timer interrupt
    275                Time_Sequence = POSIT_0;
   \   000200   8243....     MOV.W   #0x0, &Time_Sequence
   \   000204   A1000800     ADDA    #0x8, SP
    276                
    277                // Count up to time unit
    278                while(Time_Sequence < t){
   \                     ??Listen_7:
   \   000208   8298....     CMP.W   R8, &Time_Sequence
   \   00020C   032C         JC      ??Listen_29
    279                  Left_Forward_On();
   \   00020E   ........     CALLA   #Left_Forward_On
   \   000212   FA3F         JMP     ??Listen_7
    280                }
    281                // Turning off after reached time unit
    282                Left_Forward_Off();
   \                     ??Listen_29:
   \   000214   ........     CALLA   #Left_Forward_Off
    283                break; 
   \   000218   393C         JMP     ??Listen_11
    284                
    285              //---------Left Turn (backward)---------------------------------------------        
    286              case 'Z': 
    287                Out_To_LCD(" ",POSIT_0,"Left",POSIT_0,"Turn",POSIT_0,"R",POSIT_0);
   \                     ??Listen_23:
   \   00021A   0312         PUSH.W  #0x0
   \   00021C   3012....     PUSH.W  #`?<Constant "R">`
   \   000220   0312         PUSH.W  #0x0
   \   000222   3012....     PUSH.W  #`?<Constant "Turn">`
   \   000226   0F43         MOV.W   #0x0, R15
   \   000228   3E40....     MOV.W   #`?<Constant "Left">`, R14
   \   00022C   0D43         MOV.W   #0x0, R13
   \   00022E   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   000232   ........     CALLA   #Out_To_LCD
    288                Display_Process();
   \   000236   ........     CALLA   #Display_Process
    289                
    290                // Reset timer for timer interrupt
    291                Time_Sequence = POSIT_0;
   \   00023A   8243....     MOV.W   #0x0, &Time_Sequence
   \   00023E   A1000800     ADDA    #0x8, SP
    292                
    293                // Count up to time unit
    294                while(Time_Sequence < t){
   \                     ??Listen_8:
   \   000242   8298....     CMP.W   R8, &Time_Sequence
   \   000246   032C         JC      ??Listen_30
    295                  Right_Reverse_On();
   \   000248   ........     CALLA   #Right_Reverse_On
   \   00024C   FA3F         JMP     ??Listen_8
    296                }
    297                // Turning off after reached time unit
    298                Right_Reverse_Off();
   \                     ??Listen_30:
   \   00024E   ........     CALLA   #Right_Reverse_Off
    299                break; 
   \   000252   1C3C         JMP     ??Listen_11
    300                
    301              //---------Right Turn (backward)--------------------------------------------
    302              case 'C': // Turn reverse right
    303                Out_To_LCD(" ",POSIT_0,"Right",POSIT_0,"Turn",POSIT_0,"R",POSIT_0);
   \                     ??Listen_17:
   \   000254   0312         PUSH.W  #0x0
   \   000256   3012....     PUSH.W  #`?<Constant "R">`
   \   00025A   0312         PUSH.W  #0x0
   \   00025C   3012....     PUSH.W  #`?<Constant "Turn">`
   \   000260   0F43         MOV.W   #0x0, R15
   \   000262   3E40....     MOV.W   #`?<Constant "Right">`, R14
   \   000266   0D43         MOV.W   #0x0, R13
   \   000268   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   00026C   ........     CALLA   #Out_To_LCD
    304                Display_Process();
   \   000270   ........     CALLA   #Display_Process
    305                
    306                // Reset timer for timer interrupt
    307                Time_Sequence = POSIT_0;
   \   000274   8243....     MOV.W   #0x0, &Time_Sequence
   \   000278   A1000800     ADDA    #0x8, SP
    308                
    309                // Count up to time unit
    310                while(Time_Sequence < t){
   \                     ??Listen_9:
   \   00027C   8298....     CMP.W   R8, &Time_Sequence
   \   000280   032C         JC      ??Listen_31
    311                  Left_Reverse_On();
   \   000282   ........     CALLA   #Left_Reverse_On
   \   000286   FA3F         JMP     ??Listen_9
    312                }
    313                // Turning off after reached time unit
    314                Left_Reverse_Off();
   \                     ??Listen_31:
   \   000288   ........     CALLA   #Left_Reverse_Off
    315                break; 
    316              default: break; 
    317              }
    318              
    319              if(inc == (SMALL_RING_SIZE-POSIT_1)){
   \                     ??Listen_11:
   \   00028C   3A902700     CMP.W   #0x27, R10
   \   000290   0220         JNE     ??Listen_32
    320                inc = POSIT_0;
   \   000292   0A43         MOV.W   #0x0, R10
   \   000294   DA3E         JMP     ??Listen_10
    321              }else{
    322                inc++;
   \                     ??Listen_32:
   \   000296   1A53         ADD.W   #0x1, R10
   \   000298   D83E         JMP     ??Listen_10
    323              } 
    324            }
    325          }
   \                     ??Listen_14:
   \   00029A   3817         POPM.W  #0x4, R11
   \   00029C   1001         RETA
   \   00029E                REQUIRE _A_PBIN_L
    326          
    327          //------------------------------------------------------------------------------
    328          //      Function name: Set_SSID 
    329          //      Description: Setting SSID 
    330          //      Global variables: 
    331          //      Local variables:  
    332          //      Return: VOID
    333          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    334          void Set_SSID(void){
   \                     Set_SSID:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    335            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    336            char sSSID[SMALL_RING_SIZE] = "AT+S.SSIDTXT=ncsu\r"; 
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SSIDTXT=ncsu\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    337            
    338            // initializing receive buffer
    339            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Set_SSID_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Set_SSID_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Set_SSID_0
    340            
    341            // Updating display 
    342            Out_To_LCD("Set SSID", POSIT_0, "", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \                     ??Set_SSID_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Set SSID">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    343            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    344            
    345            // Transmitting commands
    346            while(ALWAYS){
    347              UCA1TXBUF = UCA0TXBUF = sSSID[i]; 
   \                     ??Set_SSID_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    348              if(sSSID[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Set_SSID_4
    349              Five_Msec_Delay(POSIT_1); 
    350              i++;
    351            }
    352            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    353          }
   \   00006E   053C         JMP     ??Set_SSID_2
   \                     ??Set_SSID_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Set_SSID_1
   \                     ??Set_SSID_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    354          
    355          //------------------------------------------------------------------------------
    356          //      Function name: Get_SSID
    357          //      Description: Getting SSID 
    358          //      Global variables: 
    359          //      Local variables:  
    360          //      Return: VOID
    361          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    362          void Get_SSID(void){
   \                     Get_SSID:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    363            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    364            char gSSID[SMALL_RING_SIZE] = "AT+S.SSIDTXT\r"; 
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SSIDTXT\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    365            
    366            // initializing receive buffer
    367            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Get_SSID_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Get_SSID_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Get_SSID_0
    368            
    369            // Updating display 
    370            Out_To_LCD("Get SSID", POSIT_0, "", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \                     ??Get_SSID_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Get SSID">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    371            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    372            
    373            // Transmitting commands 
    374            while(ALWAYS){
    375              UCA1TXBUF = UCA0TXBUF = gSSID[i]; 
   \                     ??Get_SSID_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    376              if(gSSID[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0420         JNE     ??Get_SSID_4
    377              Five_Msec_Delay(POSIT_1); 
    378              i++;
    379            }
    380            Five_Msec_Delay(POSIT_2);
   \   000066   2C43         MOV.W   #0x2, R12
   \   000068   ........     CALLA   #Five_Msec_Delay
    381          }
   \   00006C   053C         JMP     ??Get_SSID_2
   \                     ??Get_SSID_4:
   \   00006E   1C43         MOV.W   #0x1, R12
   \   000070   ........     CALLA   #Five_Msec_Delay
   \   000074   1A53         ADD.W   #0x1, R10
   \   000076   E93F         JMP     ??Get_SSID_1
   \                     ??Get_SSID_2:
   \   000078   A1002800     ADDA    #0x28, SP
   \   00007C   3A41         POP.W   R10
   \   00007E   1001         RETA
   \   000080                REQUIRE _A_UCA1TXBUF_L
   \   000080                REQUIRE _A_UCA0TXBUF_L
    382          
    383          //------------------------------------------------------------------------------
    384          //      Function name: Set_HostN
    385          //      Description: Sets host name 
    386          //      Global variables: 
    387          //      Local variables:  
    388          //      Return: VOID
    389          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    390          void Set_HostN(void){
   \                     Set_HostN:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    391            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    392            char sHostN[SMALL_RING_SIZE] = "AT+S.SCFG=ip_hostname,ECE-306_02_R\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=ip_hostname...">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    393            
    394            // initializing receive buffer
    395            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Set_HostN_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Set_HostN_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Set_HostN_0
    396            
    397            // Updating display 
    398            Out_To_LCD("Set", POSIT_0, "hostname", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \                     ??Set_HostN_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "hostname">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Set">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    399            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    400            
    401            // Transmitting commands 
    402            while(ALWAYS){
    403              UCA1TXBUF = UCA0TXBUF = sHostN[i]; 
   \                     ??Set_HostN_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    404              if(sHostN[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Set_HostN_4
    405              Five_Msec_Delay(POSIT_1); 
    406              i++;
    407            }
    408            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    409          } 
   \   00006E   053C         JMP     ??Set_HostN_2
   \                     ??Set_HostN_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Set_HostN_1
   \                     ??Set_HostN_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    410          
    411          //------------------------------------------------------------------------------
    412          //      Function name: Get_HostN
    413          //      Description: Gets host name 
    414          //      Global variables: 
    415          //      Local variables:  
    416          //      Return: VOID
    417          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    418          void Get_HostN(void){
   \                     Get_HostN:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    419            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    420            char gHostN[SMALL_RING_SIZE] = "AT+S.SCFG=ip_hostname\r";  
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=ip_hostname\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    421            
    422            // initializing receive buffer
    423            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Get_HostN_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Get_HostN_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Get_HostN_0
    424            
    425            // Updating display 
    426            Out_To_LCD("Get", POSIT_0, "hostname", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \                     ??Get_HostN_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "hostname">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Get">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    427            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    428            
    429            // Transmitting commands 
    430            while(ALWAYS){
    431              UCA1TXBUF = UCA0TXBUF = gHostN[i]; 
   \                     ??Get_HostN_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    432              if(gHostN[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Get_HostN_4
    433              Five_Msec_Delay(POSIT_1); 
    434              i++;
    435            }
    436            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    437          }
   \   00006E   053C         JMP     ??Get_HostN_2
   \                     ??Get_HostN_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Get_HostN_1
   \                     ??Get_HostN_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    438          
    439          //------------------------------------------------------------------------------
    440          //      Function name: Set_NetP
    441          //      Description: Setting network privacy mode 
    442          //      Global variables: 
    443          //      Local variables:  
    444          //      Return: VOID
    445          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    446          void Set_NetP(void){
   \                     Set_NetP:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    447            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    448            char sNetP[SMALL_RING_SIZE] = "AT+S.SCFG=wifi_priv_mode,0\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_priv_m...">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    449            
    450            // initializing receive buffer
    451            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Set_NetP_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Set_NetP_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Set_NetP_0
    452            
    453            // Updating display 
    454            Out_To_LCD("Set", POSIT_0, "network", POSIT_0, "privacy", POSIT_0, "", POSIT_0); 
   \                     ??Set_NetP_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "privacy">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "network">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Set">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    455            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    456            
    457            // Transmitting commands 
    458            while(ALWAYS){
    459              UCA1TXBUF = UCA0TXBUF = sNetP[i]; 
   \                     ??Set_NetP_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    460              if(sNetP[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Set_NetP_4
    461              Five_Msec_Delay(POSIT_1); 
    462              i++;
    463            }
    464            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    465          } 
   \   00006E   053C         JMP     ??Set_NetP_2
   \                     ??Set_NetP_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Set_NetP_1
   \                     ??Set_NetP_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    466          
    467          //------------------------------------------------------------------------------
    468          //      Function name: Get_NetP
    469          //      Description: Get network privacy mode  
    470          //      Global variables: 
    471          //      Local variables:  
    472          //      Return: VOID
    473          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    474          void Get_NetP(void){
   \                     Get_NetP:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    475            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    476            char gNetP[SMALL_RING_SIZE] = "AT+S.SCFG=wifi_priv_mode\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_priv_m...">_1`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    477            
    478            // initializing receive buffer
    479            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Get_NetP_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Get_NetP_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Get_NetP_0
    480            
    481            // Updating display 
    482            Out_To_LCD("Get", POSIT_0, "network", POSIT_0, "privacy", POSIT_0, "", POSIT_0); 
   \                     ??Get_NetP_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "privacy">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "network">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Get">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    483            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    484            
    485            // Transmitting commands 
    486            while(ALWAYS){
    487              UCA1TXBUF = UCA0TXBUF = gNetP[i]; 
   \                     ??Get_NetP_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    488              if(gNetP[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Get_NetP_4
    489              Five_Msec_Delay(POSIT_1); 
    490              i++;
    491            }
    492            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    493          } 
   \   00006E   053C         JMP     ??Get_NetP_2
   \                     ??Get_NetP_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Get_NetP_1
   \                     ??Get_NetP_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    494          
    495          //------------------------------------------------------------------------------
    496          //      Function name: Set_NetM
    497          //      Description: Setting network mode 
    498          //      Global variables: 
    499          //      Local variables:  
    500          //      Return: VOID
    501          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    502          void Set_NetM(void){
   \                     Set_NetM:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    503            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    504            char sNetM[SMALL_RING_SIZE] = "AT+S.SCFG=wifi_mode,1\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_mode,1\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    505            
    506            // initializing receive buffer
    507            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Set_NetM_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Set_NetM_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Set_NetM_0
    508            
    509            // Updating display 
    510            Out_To_LCD("Set", POSIT_0, "network", POSIT_0, "mode", POSIT_0, "", POSIT_0); 
   \                     ??Set_NetM_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "mode">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "network">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Set">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    511            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    512            
    513            // Transmitting commands 
    514            while(ALWAYS){
    515              UCA1TXBUF = UCA0TXBUF = sNetM[i]; 
   \                     ??Set_NetM_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    516              if(sNetM[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Set_NetM_4
    517              Five_Msec_Delay(POSIT_1); 
    518              i++;
    519            }
    520            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    521          } 
   \   00006E   053C         JMP     ??Set_NetM_2
   \                     ??Set_NetM_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Set_NetM_1
   \                     ??Set_NetM_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    522          
    523          //------------------------------------------------------------------------------
    524          //      Function name: Get_NetM
    525          //      Description: Getting network mode 
    526          //      Global variables: 
    527          //      Local variables:  
    528          //      Return: VOID
    529          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    530          void Get_NetM(void){
   \                     Get_NetM:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    531            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    532            char gNetM[SMALL_RING_SIZE] = "AT+S.SCFG=wifi_mode\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_mode\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    533            
    534            // initializing receive buffer
    535            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Get_NetM_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Get_NetM_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Get_NetM_0
    536            
    537            // Updating display 
    538            Out_To_LCD("Get", POSIT_0, "network", POSIT_0, "mode", POSIT_0, "", POSIT_0); 
   \                     ??Get_NetM_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "mode">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "network">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Get">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    539            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    540            
    541            // Transmitting commands 
    542            while(ALWAYS){
    543              UCA1TXBUF = UCA0TXBUF = gNetM[i]; 
   \                     ??Get_NetM_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    544              if(gNetM[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Get_NetM_4
    545              Five_Msec_Delay(POSIT_1); 
    546              i++;
    547            }
    548            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    549          } 
   \   00006E   053C         JMP     ??Get_NetM_2
   \                     ??Get_NetM_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Get_NetM_1
   \                     ??Get_NetM_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    550          
    551          //------------------------------------------------------------------------------
    552          //      Function name: Save_All
    553          //      Description: Save the settings on the flash memory   
    554          //      Global variables: 
    555          //      Local variables:  
    556          //      Return: VOID
    557          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    558          void Save_All(void){
   \                     Save_All:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    559            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    560            char save[SMALL_RING_SIZE] = "AT&W\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT&W\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    561            
    562            // initializing receive buffer
    563            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Save_All_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Save_All_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Save_All_0
    564            
    565            // Updating display 
    566            Out_To_LCD("Save", POSIT_0, "settings", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \                     ??Save_All_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "settings">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Save">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    567            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    568            
    569            // Transmitting commands 
    570            while(ALWAYS){
    571              UCA1TXBUF = UCA0TXBUF = save[i]; 
   \                     ??Save_All_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    572              if(save[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Save_All_4
    573              Five_Msec_Delay(POSIT_1); 
    574              i++;
    575            }
    576            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    577          } 
   \   00006E   053C         JMP     ??Save_All_2
   \                     ??Save_All_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Save_All_1
   \                     ??Save_All_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    578          
    579          //------------------------------------------------------------------------------
    580          //      Function name: Reset_All 
    581          //      Description: Resets the module 
    582          //      Global variables: 
    583          //      Local variables:  
    584          //      Return: VOID
    585          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    586          void Reset_All(void){
   \                     Reset_All:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    587            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    588            char reset[SMALL_RING_SIZE] = "AT+CFUN=1\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+CFUN=1\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    589            
    590            // initializing receive buffer
    591            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Reset_All_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Reset_All_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Reset_All_0
    592            
    593            // Updating display 
    594            Out_To_LCD("Reset", POSIT_0, "module", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \                     ??Reset_All_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "module">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Reset">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    595            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    596            
    597            // Transmitting commands 
    598            while(ALWAYS){
    599              UCA1TXBUF = UCA0TXBUF = reset[i]; 
   \                     ??Reset_All_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    600              if(reset[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Reset_All_4
    601              Five_Msec_Delay(POSIT_1); 
    602              i++;
    603            }
    604            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    605          } 
   \   00006E   053C         JMP     ??Reset_All_2
   \                     ??Reset_All_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Reset_All_1
   \                     ??Reset_All_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    606          
    607          //------------------------------------------------------------------------------
    608          //      Function name: Roam
    609          //      Description: Sets up roaming for wifi 
    610          //      Global variables: 
    611          //      Local variables:  
    612          //      Return: VOID
    613          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    614          void Roam(void){
   \                     Roam:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    615            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    616            char roam[SMALL_RING_SIZE] = "AT+S.ROAM\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.ROAM\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    617            
    618            // initializing receive buffer
    619            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Roam_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Roam_3
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Roam_0
    620            
    621            // Updating display 
    622            Out_To_LCD("Roaming...", POSIT_0, "", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \                     ??Roam_3:
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0312         PUSH.W  #0x0
   \   00002E   3012....     PUSH.W  #`?<Constant "">`
   \   000032   0F43         MOV.W   #0x0, R15
   \   000034   3E40....     MOV.W   #`?<Constant "">`, R14
   \   000038   0D43         MOV.W   #0x0, R13
   \   00003A   3C40....     MOV.W   #`?<Constant "Roaming...">`, R12
   \   00003E   ........     CALLA   #Out_To_LCD
    623            Display_Process();
   \   000042   ........     CALLA   #Display_Process
   \   000046   A1000800     ADDA    #0x8, SP
    624            
    625            // Transmitting commands 
    626            while(ALWAYS){
    627              UCA1TXBUF = UCA0TXBUF = roam[i]; 
   \                     ??Roam_1:
   \   00004A   0F4A         MOV.W   R10, R15
   \   00004C   0F51         ADD.W   SP, R15
   \   00004E   6E4F         MOV.B   @R15, R14
   \   000050   4E4E         MOV.B   R14, R14
   \   000052   824ECE05     MOV.W   R14, &0x5ce
   \   000056   824EEE05     MOV.W   R14, &0x5ee
    628              if(roam[i] == CAR_RET)break; 
   \   00005A   0F4A         MOV.W   R10, R15
   \   00005C   0F51         ADD.W   SP, R15
   \   00005E   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000064   0520         JNE     ??Roam_4
    629              Five_Msec_Delay(POSIT_1); 
    630              i++;
    631            }
    632            Five_Msec_Delay(POSIT_5);
   \   000066   3C400500     MOV.W   #0x5, R12
   \   00006A   ........     CALLA   #Five_Msec_Delay
    633          }
   \   00006E   053C         JMP     ??Roam_2
   \                     ??Roam_4:
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_Msec_Delay
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   E83F         JMP     ??Roam_1
   \                     ??Roam_2:
   \   00007A   A1002800     ADDA    #0x28, SP
   \   00007E   3A41         POP.W   R10
   \   000080   1001         RETA
   \   000082                REQUIRE _A_UCA1TXBUF_L
   \   000082                REQUIRE _A_UCA0TXBUF_L
    634          
    635          //------------------------------------------------------------------------------
    636          //      Function name: Check_Status
    637          //      Description: Gets ip address  
    638          //      Global variables: 
    639          //      Local variables:  
    640          //      Return: VOID
    641          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    642          void Check_Status(void){
   \                     Check_Status:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    643            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    644            char check[SMALL_RING_SIZE] = "AT+S.STS=ip_ipaddr\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.STS=ip_ipaddr\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    645            
    646            // initializing receive buffer
    647            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Check_Status_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Check_Status_1
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Check_Status_0
    648            
    649            // Transmitting commands 
    650            while(ALWAYS){
    651              UCA1TXBUF = UCA0TXBUF = check[i]; 
   \                     ??Check_Status_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6E4F         MOV.B   @R15, R14
   \   00002C   4E4E         MOV.B   R14, R14
   \   00002E   824ECE05     MOV.W   R14, &0x5ce
   \   000032   824EEE05     MOV.W   R14, &0x5ee
    652              if(check[i] == CAR_RET)break; 
   \   000036   0F4A         MOV.W   R10, R15
   \   000038   0F51         ADD.W   SP, R15
   \   00003A   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000040   0520         JNE     ??Check_Status_3
    653              Five_Msec_Delay(POSIT_1); 
    654              i++;
    655            }
    656            Five_Msec_Delay(POSIT_5);
   \   000042   3C400500     MOV.W   #0x5, R12
   \   000046   ........     CALLA   #Five_Msec_Delay
    657          }
   \   00004A   053C         JMP     ??Check_Status_2
   \                     ??Check_Status_3:
   \   00004C   1C43         MOV.W   #0x1, R12
   \   00004E   ........     CALLA   #Five_Msec_Delay
   \   000052   1A53         ADD.W   #0x1, R10
   \   000054   E83F         JMP     ??Check_Status_1
   \                     ??Check_Status_2:
   \   000056   A1002800     ADDA    #0x28, SP
   \   00005A   3A41         POP.W   R10
   \   00005C   1001         RETA
   \   00005E                REQUIRE _A_UCA1TXBUF_L
   \   00005E                REQUIRE _A_UCA0TXBUF_L
    658          
    659          //------------------------------------------------------------------------------
    660          //      Function name: Ping
    661          //      Description: Pings lab computer   
    662          //      Global variables: 
    663          //      Local variables:  
    664          //      Return: VOID
    665          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    666          void Ping(void){
   \                     Ping:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    667            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    668            char ping[SMALL_RING_SIZE] = "AT+S.PING= 152.14.99.126\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.PING= 152.14.99....">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    669            
    670            // initializing receive buffer
    671            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Ping_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Ping_1
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Ping_0
    672            
    673            // Transmitting commands 
    674            while(ALWAYS){
    675              UCA1TXBUF = UCA0TXBUF = ping[i]; 
   \                     ??Ping_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6E4F         MOV.B   @R15, R14
   \   00002C   4E4E         MOV.B   R14, R14
   \   00002E   824ECE05     MOV.W   R14, &0x5ce
   \   000032   824EEE05     MOV.W   R14, &0x5ee
    676              if(ping[i] == CAR_RET)break; 
   \   000036   0F4A         MOV.W   R10, R15
   \   000038   0F51         ADD.W   SP, R15
   \   00003A   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000040   0520         JNE     ??Ping_3
    677              Five_Msec_Delay(POSIT_1); 
    678              i++;
    679            }
    680            Five_Msec_Delay(POSIT_5);
   \   000042   3C400500     MOV.W   #0x5, R12
   \   000046   ........     CALLA   #Five_Msec_Delay
    681          }
   \   00004A   053C         JMP     ??Ping_2
   \                     ??Ping_3:
   \   00004C   1C43         MOV.W   #0x1, R12
   \   00004E   ........     CALLA   #Five_Msec_Delay
   \   000052   1A53         ADD.W   #0x1, R10
   \   000054   E83F         JMP     ??Ping_1
   \                     ??Ping_2:
   \   000056   A1002800     ADDA    #0x28, SP
   \   00005A   3A41         POP.W   R10
   \   00005C   1001         RETA
   \   00005E                REQUIRE _A_UCA1TXBUF_L
   \   00005E                REQUIRE _A_UCA0TXBUF_L
    682          
    683          //------------------------------------------------------------------------------
    684          //      Function name: Check_Str
    685          //      Description: Checks to see if string is allowed to be received  
    686          //      Global variables: 
    687          //      Local variables:  
    688          //      Return: VOID
    689          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    690          int Check_Str(void){
   \                     Check_Str:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   B1000400     SUBA    #0x4, SP
    691            int inc = POSIT_0; 
   \   000006   0A43         MOV.W   #0x0, R10
    692            int i = POSIT_0;
   \   000008   0B43         MOV.W   #0x0, R11
    693            char pin[POSIT_4];
    694            
    695            Out_To_LCD(" ",POSIT_0,"Checking",POSIT_0,"Pin...",POSIT_0," ",POSIT_0);
   \   00000A   0312         PUSH.W  #0x0
   \   00000C   3012....     PUSH.W  #`?<Constant " ">`
   \   000010   0312         PUSH.W  #0x0
   \   000012   3012....     PUSH.W  #`?<Constant "Pin...">`
   \   000016   0F43         MOV.W   #0x0, R15
   \   000018   3E40....     MOV.W   #`?<Constant "Checking">`, R14
   \   00001C   0D43         MOV.W   #0x0, R13
   \   00001E   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   000022   ........     CALLA   #Out_To_LCD
    696            lcd_4line();
   \   000026   ........     CALLA   #lcd_4line
    697            Display_Process();
   \   00002A   ........     CALLA   #Display_Process
    698            X_Seconds_Delay(POSIT_1);
   \   00002E   1C43         MOV.W   #0x1, R12
   \   000030   ........     CALLA   #X_Seconds_Delay
    699            
    700            // Pin to be recognized 
    701            pin[POSIT_0] = '0';
   \   000034   F14030000800 MOV.B   #0x30, 0x8(SP)
    702            pin[POSIT_1] = '1';
   \   00003A   F14031000900 MOV.B   #0x31, 0x9(SP)
    703            pin[POSIT_2] = '2';
   \   000040   F14032000A00 MOV.B   #0x32, 0xa(SP)
    704            pin[POSIT_3] = '4';
   \   000046   F14034000B00 MOV.B   #0x34, 0xb(SP)
    705            
    706            Five_Msec_Delay(BIG_DELAY); 
   \   00004C   3C40F401     MOV.W   #0x1f4, R12
   \   000050   ........     CALLA   #Five_Msec_Delay
   \   000054   A1000800     ADDA    #0x8, SP
    707            
    708            // Checking for '*'
    709            while(ALWAYS){
    710              if(IOT_Char_Rx[inc] == '*')break; 
   \                     ??Check_Str_0:
   \   000058   FA902A00.... CMP.B   #0x2a, IOT_Char_Rx(R10)
   \   00005E   0620         JNE     ??Check_Str_3
    711              if(inc >= SMALL_RING_SIZE)inc=POSIT_0;
    712              inc++;
    713            }
    714            inc = POSIT_0;
   \   000060   0A43         MOV.W   #0x0, R10
    715            
    716            // Examining for unique pin
    717            Five_Msec_Delay(BIG_DELAY); 
   \   000062   3C40F401     MOV.W   #0x1f4, R12
   \   000066   ........     CALLA   #Five_Msec_Delay
   \   00006A   063C         JMP     ??Check_Str_1
   \                     ??Check_Str_3:
   \   00006C   3A902800     CMP.W   #0x28, R10
   \   000070   0138         JL      ??Check_Str_4
   \   000072   0A43         MOV.W   #0x0, R10
   \                     ??Check_Str_4:
   \   000074   1A53         ADD.W   #0x1, R10
   \   000076   F03F         JMP     ??Check_Str_0
    718            while(ALWAYS){
    719              if(i)break;
   \                     ??Check_Str_1:
   \   000078   0B93         CMP.W   #0x0, R11
   \   00007A   1924         JEQ     ??Check_Str_5
    720              if(inc >= SMALL_RING_SIZE)inc=POSIT_0;
    721              if(IOT_Char_Rx[inc] == pin[POSIT_0]){
    722                if(IOT_Char_Rx[inc+POSIT_1] == pin[POSIT_1]){
    723                  if(IOT_Char_Rx[inc+POSIT_2] == pin[POSIT_2]){
    724                    if(IOT_Char_Rx[inc+POSIT_3] == pin[POSIT_3]){
    725                      i = ALWAYS;
    726                    }
    727                  }
    728                }
    729              }
    730              inc++;
    731            }
    732            Out_To_LCD(" ",POSIT_0,"Pin",POSIT_0,"Approved",POSIT_0," ",POSIT_0);
   \   00007C   0312         PUSH.W  #0x0
   \   00007E   3012....     PUSH.W  #`?<Constant " ">`
   \   000082   0312         PUSH.W  #0x0
   \   000084   3012....     PUSH.W  #`?<Constant "Approved">`
   \   000088   0F43         MOV.W   #0x0, R15
   \   00008A   3E40....     MOV.W   #`?<Constant "Pin">`, R14
   \   00008E   0D43         MOV.W   #0x0, R13
   \   000090   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   000094   ........     CALLA   #Out_To_LCD
    733            lcd_4line();
   \   000098   ........     CALLA   #lcd_4line
    734            Display_Process();
   \   00009C   ........     CALLA   #Display_Process
    735            X_Seconds_Delay(POSIT_1);
   \   0000A0   1C43         MOV.W   #0x1, R12
   \   0000A2   ........     CALLA   #X_Seconds_Delay
    736            return i; 
   \   0000A6   0C4B         MOV.W   R11, R12
   \   0000A8   A1000800     ADDA    #0x8, SP
   \   0000AC   163C         JMP     ??Check_Str_2
   \                     ??Check_Str_5:
   \   0000AE   3A902800     CMP.W   #0x28, R10
   \   0000B2   0138         JL      ??Check_Str_6
   \   0000B4   0A43         MOV.W   #0x0, R10
   \                     ??Check_Str_6:
   \   0000B6   EA91....     CMP.B   @SP, IOT_Char_Rx(R10)
   \   0000BA   0D20         JNE     ??Check_Str_7
   \   0000BC   DA910100.... CMP.B   0x1(SP), IOT_Char_Rx + 1(R10)
   \   0000C2   0920         JNE     ??Check_Str_7
   \   0000C4   DA910200.... CMP.B   0x2(SP), IOT_Char_Rx + 2(R10)
   \   0000CA   0520         JNE     ??Check_Str_7
   \   0000CC   DA910300.... CMP.B   0x3(SP), IOT_Char_Rx + 3(R10)
   \   0000D2   0120         JNE     ??Check_Str_7
   \   0000D4   1B43         MOV.W   #0x1, R11
   \                     ??Check_Str_7:
   \   0000D6   1A53         ADD.W   #0x1, R10
   \   0000D8   CF3F         JMP     ??Check_Str_1
   \                     ??Check_Str_2:
   \   0000DA   A1000400     ADDA    #0x4, SP
   \   0000DE   1A17         POPM.W  #0x2, R11
   \   0000E0   1001         RETA
    737          }
    738          
    739          //------------------------------------------------------------------------------
    740          //      Function name: Reconnect
    741          //      Description: Reconnects to Wifi   
    742          //      Global variables: 
    743          //      Local variables:  
    744          //      Return: VOID
    745          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    746          void Reconnect(void){
   \                     Reconnect:
   \   000000   3B15         PUSHM.W #0x4, R11
    747              int i; 
    748              int j; 
    749              int k; 
    750              Reset_All();
   \   000002   ........     CALLA   #Reset_All
    751            
    752            // Reset, delayed for one second, brought back
    753            PJOUT |= RESET;
   \   000006   B2D22203     BIS.W   #0x8, &0x322
    754            X_Seconds_Delay(POSIT_1); 
   \   00000A   1C43         MOV.W   #0x1, R12
   \   00000C   ........     CALLA   #X_Seconds_Delay
    755            PJOUT &= ~RESET;
   \   000010   B2C22203     BIC.W   #0x8, &0x322
    756            
    757            // Another 1 second delay, then re-initialize LCD 
    758            X_Seconds_Delay(POSIT_1); 
   \   000014   1C43         MOV.W   #0x1, R12
   \   000016   ........     CALLA   #X_Seconds_Delay
    759            Init_LCD(); 
   \   00001A   ........     CALLA   #Init_LCD
    760            
    761            // Clearing LCD 
    762            Out_To_LCD("Reset", POSIT_0, "Complete", POSIT_0, "", POSIT_0, "", POSIT_0); 
   \   00001E   0312         PUSH.W  #0x0
   \   000020   3012....     PUSH.W  #`?<Constant "">`
   \   000024   0312         PUSH.W  #0x0
   \   000026   3012....     PUSH.W  #`?<Constant "">`
   \   00002A   0F43         MOV.W   #0x0, R15
   \   00002C   3E40....     MOV.W   #`?<Constant "Complete">`, R14
   \   000030   0D43         MOV.W   #0x0, R13
   \   000032   3C40....     MOV.W   #`?<Constant "Reset">`, R12
   \   000036   ........     CALLA   #Out_To_LCD
    763            Display_Process();
   \   00003A   ........     CALLA   #Display_Process
    764            X_Seconds_Delay(POSIT_2);
   \   00003E   2C43         MOV.W   #0x2, R12
   \   000040   ........     CALLA   #X_Seconds_Delay
    765            
    766            //----------Connecting to network---------------------------------------------
    767            Out_To_LCD("Connecting", POSIT_0, "to", POSIT_0, "network...", POSIT_0, "",
    768                       POSIT_0);
   \   000044   0312         PUSH.W  #0x0
   \   000046   3012....     PUSH.W  #`?<Constant "">`
   \   00004A   0312         PUSH.W  #0x0
   \   00004C   3012....     PUSH.W  #`?<Constant "network...">`
   \   000050   0F43         MOV.W   #0x0, R15
   \   000052   3E40....     MOV.W   #`?<Constant "to">`, R14
   \   000056   0D43         MOV.W   #0x0, R13
   \   000058   3C40....     MOV.W   #`?<Constant "Connecting">`, R12
   \   00005C   ........     CALLA   #Out_To_LCD
    769            Display_Process();
   \   000060   ........     CALLA   #Display_Process
    770            Five_Msec_Delay(FITTY); 
   \   000064   3C403200     MOV.W   #0x32, R12
   \   000068   ........     CALLA   #Five_Msec_Delay
    771            
    772            // Checking if connection is successful by looking out for "Handshake" 
    773            i = POSIT_0;
   \   00006C   0A43         MOV.W   #0x0, R10
    774            cpu_rx_ring_wr = POSIT_0;
   \   00006E   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
   \   000072   A1001000     ADDA    #0x10, SP
    775            while(ALWAYS){
    776              if(i)break; 
   \                     ??Reconnect_0:
   \   000076   0A93         CMP.W   #0x0, R10
   \   000078   1E24         JEQ     ??Reconnect_5
    777              if(IOT_Char_Rx[cpu_rx_ring_wr]== 'H'){
    778                if(IOT_Char_Rx[cpu_rx_ring_wr+POSIT_1]== 'a'){
    779                  if(IOT_Char_Rx[cpu_rx_ring_wr+POSIT_2]== 'n'){
    780                    i = ALWAYS;
    781                  }
    782                }
    783              }
    784            }
    785              
    786            Out_To_LCD("Successful", POSIT_0, "connection", POSIT_0, "", POSIT_0, "",
    787                       POSIT_0);
   \   00007A   0312         PUSH.W  #0x0
   \   00007C   3012....     PUSH.W  #`?<Constant "">`
   \   000080   0312         PUSH.W  #0x0
   \   000082   3012....     PUSH.W  #`?<Constant "">`
   \   000086   0F43         MOV.W   #0x0, R15
   \   000088   3E40....     MOV.W   #`?<Constant "connection">`, R14
   \   00008C   0D43         MOV.W   #0x0, R13
   \   00008E   3C40....     MOV.W   #`?<Constant "Successful">`, R12
   \   000092   ........     CALLA   #Out_To_LCD
    788            Display_Process(); 
   \   000096   ........     CALLA   #Display_Process
    789            X_Seconds_Delay(POSIT_2);
   \   00009A   2C43         MOV.W   #0x2, R12
   \   00009C   ........     CALLA   #X_Seconds_Delay
    790            
    791            //----------Roaming----------------------------------------------------------- 
    792            //  Roam(); 
    793            //  Five_Msec_Delay(POSIT_10);
    794            
    795            //---------Get SSID and display to LCD----------------------------------------
    796            Get_SSID(); 
   \   0000A0   ........     CALLA   #Get_SSID
    797            cpu_rx_ring_wr = POSIT_0;
   \   0000A4   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
    798            i = POSIT_0;
   \   0000A8   0A43         MOV.W   #0x0, R10
    799            X_Seconds_Delay(POSIT_1);
   \   0000AA   1C43         MOV.W   #0x1, R12
   \   0000AC   ........     CALLA   #X_Seconds_Delay
   \   0000B0   A1000800     ADDA    #0x8, SP
   \   0000B4   143C         JMP     ??Reconnect_1
   \                     ??Reconnect_5:
   \   0000B6   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   0000BA   FF904800.... CMP.B   #0x48, IOT_Char_Rx(R15)
   \   0000C0   DA23         JNE     ??Reconnect_0
   \   0000C2   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   0000C6   FF906100.... CMP.B   #0x61, IOT_Char_Rx + 1(R15)
   \   0000CC   D423         JNE     ??Reconnect_0
   \   0000CE   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   0000D2   FF906E00.... CMP.B   #0x6e, IOT_Char_Rx + 2(R15)
   \   0000D8   CE23         JNE     ??Reconnect_0
   \   0000DA   1A43         MOV.W   #0x1, R10
   \   0000DC   CC3F         JMP     ??Reconnect_0
    800            
    801            // Parsing through Rx array until "ncsu" is reached 
    802            while(ALWAYS){
    803              if(i)break;
   \                     ??Reconnect_1:
   \   0000DE   0A93         CMP.W   #0x0, R10
   \   0000E0   8124         JEQ     ??Reconnect_6
    804              
    805              // Finds "u" first and then backtracks to "n"
    806              if(IOT_Char_Rx[cpu_rx_ring_wr] == 'u'){
    807                if(IOT_Char_Rx[cpu_rx_ring_wr - POSIT_1] == 's'){
    808                  i = ALWAYS;
    809                }
    810              }
    811              // Keeping value of IOT_Char_Rx counter 
    812              k = cpu_rx_ring_wr;
    813              cpu_rx_ring_wr++;
    814            }
    815            
    816            // Output SSID to LCD 
    817            display_1[POSIT_0] = ' '; 
   \   0000E2   1F42....     MOV.W   &display_1, R15
   \   0000E6   FF4020000000 MOV.B   #0x20, 0(R15)
    818            display_1[POSIT_1] = ' ';
   \   0000EC   1F42....     MOV.W   &display_1, R15
   \   0000F0   FF4020000100 MOV.B   #0x20, 0x1(R15)
    819            display_1[POSIT_2] = ' ';
   \   0000F6   1F42....     MOV.W   &display_1, R15
   \   0000FA   FF4020000200 MOV.B   #0x20, 0x2(R15)
    820            display_1[POSIT_3] = IOT_Char_Rx[k-POSIT_3];
   \   000100   1F42....     MOV.W   &display_1, R15
   \   000104   DF48....0300 MOV.B   LWRD(IOT_Char_Rx + 65533)(R8), 0x3(R15)
    821            display_1[POSIT_4] = IOT_Char_Rx[k-POSIT_2];
   \   00010A   1F42....     MOV.W   &display_1, R15
   \   00010E   DF48....0400 MOV.B   LWRD(IOT_Char_Rx + 65534)(R8), 0x4(R15)
    822            display_1[POSIT_5] = IOT_Char_Rx[k-POSIT_1];
   \   000114   1F42....     MOV.W   &display_1, R15
   \   000118   DF48....0500 MOV.B   LWRD(IOT_Char_Rx + 65535)(R8), 0x5(R15)
    823            display_1[POSIT_6] = IOT_Char_Rx[k];
   \   00011E   1F42....     MOV.W   &display_1, R15
   \   000122   DF48....0600 MOV.B   IOT_Char_Rx(R8), 0x6(R15)
    824            display_1[POSIT_7] = ' ';
   \   000128   1F42....     MOV.W   &display_1, R15
   \   00012C   FF4020000700 MOV.B   #0x20, 0x7(R15)
    825            display_1[POSIT_8] = ' ';
   \   000132   1F42....     MOV.W   &display_1, R15
   \   000136   FF4020000800 MOV.B   #0x20, 0x8(R15)
    826            display_1[POSIT_9] = ' ';
   \   00013C   1F42....     MOV.W   &display_1, R15
   \   000140   FF4020000900 MOV.B   #0x20, 0x9(R15)
    827            Display_Process();
   \   000146   ........     CALLA   #Display_Process
    828            
    829            // Re-initializing values 
    830            cpu_rx_ring_wr = POSIT_0;
   \   00014A   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
    831            k = POSIT_0;
   \   00014E   0843         MOV.W   #0x0, R8
    832            Five_Msec_Delay(BIG_DELAY);
   \   000150   3C40F401     MOV.W   #0x1f4, R12
   \   000154   ........     CALLA   #Five_Msec_Delay
    833            
    834            
    835            //---------Get ip address-----------------------------------------------------
    836            display_2 = "          ";
   \   000158   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    837            display_2[POSIT_0] = ' '; 
   \   00015E   1F42....     MOV.W   &display_2, R15
   \   000162   FF4020000000 MOV.B   #0x20, 0(R15)
    838            display_2[POSIT_1] = ' ';
   \   000168   1F42....     MOV.W   &display_2, R15
   \   00016C   FF4020000100 MOV.B   #0x20, 0x1(R15)
    839            display_2[POSIT_2] = 'i';
   \   000172   1F42....     MOV.W   &display_2, R15
   \   000176   FF4069000200 MOV.B   #0x69, 0x2(R15)
    840            display_2[POSIT_3] = 'p';
   \   00017C   1F42....     MOV.W   &display_2, R15
   \   000180   FF4070000300 MOV.B   #0x70, 0x3(R15)
    841            display_2[POSIT_4] = 'a';
   \   000186   1F42....     MOV.W   &display_2, R15
   \   00018A   FF4061000400 MOV.B   #0x61, 0x4(R15)
    842            display_2[POSIT_5] = 'd';
   \   000190   1F42....     MOV.W   &display_2, R15
   \   000194   FF4064000500 MOV.B   #0x64, 0x5(R15)
    843            display_2[POSIT_6] = 'd';
   \   00019A   1F42....     MOV.W   &display_2, R15
   \   00019E   FF4064000600 MOV.B   #0x64, 0x6(R15)
    844            display_2[POSIT_7] = 'r';
   \   0001A4   1F42....     MOV.W   &display_2, R15
   \   0001A8   FF4072000700 MOV.B   #0x72, 0x7(R15)
    845            display_2[POSIT_8] = ' ';
   \   0001AE   1F42....     MOV.W   &display_2, R15
   \   0001B2   FF4020000800 MOV.B   #0x20, 0x8(R15)
    846            display_2[POSIT_9] = ' ';
   \   0001B8   1F42....     MOV.W   &display_2, R15
   \   0001BC   FF4020000900 MOV.B   #0x20, 0x9(R15)
    847            Display_Process(); 
   \   0001C2   ........     CALLA   #Display_Process
    848            X_Seconds_Delay(POSIT_2);
   \   0001C6   2C43         MOV.W   #0x2, R12
   \   0001C8   ........     CALLA   #X_Seconds_Delay
    849            
    850            // Function to get ip address 
    851            Check_Status(); 
   \   0001CC   ........     CALLA   #Check_Status
    852            Five_Msec_Delay(BOOT_DELAY);
   \   0001D0   3C401900     MOV.W   #0x19, R12
   \   0001D4   ........     CALLA   #Five_Msec_Delay
    853            
    854            // Reset ring buffer increment 
    855            cpu_rx_ring_wr = POSIT_0;
   \   0001D8   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
    856            i = POSIT_0;
   \   0001DC   0A43         MOV.W   #0x0, R10
    857            
    858            // Disabling RX interrupt
    859            UCA1IE &= ~UCRXIE;             
   \   0001DE   92C3FA05     BIC.W   #0x1, &0x5fa
   \   0001E2   123C         JMP     ??Reconnect_2
   \                     ??Reconnect_6:
   \   0001E4   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   0001E8   FF907500.... CMP.B   #0x75, IOT_Char_Rx(R15)
   \   0001EE   0720         JNE     ??Reconnect_7
   \   0001F0   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   0001F4   FF907300.... CMP.B   #0x73, LWRD(IOT_Char_Rx + 65535)(R15)
   \   0001FA   0120         JNE     ??Reconnect_7
   \   0001FC   1A43         MOV.W   #0x1, R10
   \                     ??Reconnect_7:
   \   0001FE   1842....     MOV.W   &cpu_rx_ring_wr, R8
   \   000202   9253....     ADD.W   #0x1, &cpu_rx_ring_wr
   \   000206   6B3F         JMP     ??Reconnect_1
    860            
    861            // Parsing through Rx array until ip_addr is reached 
    862            while(ALWAYS){
    863              if(i)break; 
   \                     ??Reconnect_2:
   \   000208   0A93         CMP.W   #0x0, R10
   \   00020A   0824         JEQ     ??Reconnect_8
    864              if(IOT_Char_Rx[cpu_rx_ring_wr] == 'i'){
    865                if(IOT_Char_Rx[cpu_rx_ring_wr+POSIT_1] == 'p'){
    866                  if(IOT_Char_Rx[cpu_rx_ring_wr+POSIT_2] == 'a'){
    867                    i = ALWAYS; 
    868                    j = cpu_rx_ring_wr; 
    869                    Display_Process(); 
    870                    Five_Msec_Delay(WAIT_TIME);
    871                  }
    872                } 
    873              }
    874              cpu_rx_ring_wr++;
    875            }
    876            cpu_rx_ring_wr = POSIT_0;
   \   00020C   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
    877            
    878            // Offset increment by 9 to get to start of ip address (from ip_addr) in array 
    879            k = j + POSIT_9;
   \   000210   0F4B         MOV.W   R11, R15
   \   000212   3F500900     ADD.W   #0x9, R15
   \   000216   084F         MOV.W   R15, R8
    880            
    881            // Clearing array to prepare for new data 
    882            for(int inc=POSIT_0; inc<=POSIT_9; inc++)display_3[inc] = ' '; 
   \   000218   0F43         MOV.W   #0x0, R15
   \   00021A   1E3C         JMP     ??Reconnect_3
   \                     ??Reconnect_8:
   \   00021C   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   000220   FF906900.... CMP.B   #0x69, IOT_Char_Rx(R15)
   \   000226   1520         JNE     ??Reconnect_9
   \   000228   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   00022C   FF907000.... CMP.B   #0x70, IOT_Char_Rx + 1(R15)
   \   000232   0F20         JNE     ??Reconnect_9
   \   000234   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   000238   FF906100.... CMP.B   #0x61, IOT_Char_Rx + 2(R15)
   \   00023E   0920         JNE     ??Reconnect_9
   \   000240   1A43         MOV.W   #0x1, R10
   \   000242   1B42....     MOV.W   &cpu_rx_ring_wr, R11
   \   000246   ........     CALLA   #Display_Process
   \   00024A   3C401400     MOV.W   #0x14, R12
   \   00024E   ........     CALLA   #Five_Msec_Delay
   \                     ??Reconnect_9:
   \   000252   9253....     ADD.W   #0x1, &cpu_rx_ring_wr
   \   000256   D83F         JMP     ??Reconnect_2
   \                     ??Reconnect_3:
   \   000258   3F900A00     CMP.W   #0xa, R15
   \   00025C   0834         JGE     ??Reconnect_10
   \   00025E   1E42....     MOV.W   &display_3, R14
   \   000262   0E5F         ADD.W   R15, R14
   \   000264   FE4020000000 MOV.B   #0x20, 0(R14)
   \   00026A   1F53         ADD.W   #0x1, R15
   \   00026C   F53F         JMP     ??Reconnect_3
    883            Display_Process(); 
   \                     ??Reconnect_10:
   \   00026E   ........     CALLA   #Display_Process
    884            X_Seconds_Delay(POSIT_2);
   \   000272   2C43         MOV.W   #0x2, R12
   \   000274   ........     CALLA   #X_Seconds_Delay
    885            
    886            // Output ip address to LCD 
    887            display_3[POSIT_0] = ' '; 
   \   000278   1F42....     MOV.W   &display_3, R15
   \   00027C   FF4020000000 MOV.B   #0x20, 0(R15)
    888            display_3[POSIT_1] = ' ';
   \   000282   1F42....     MOV.W   &display_3, R15
   \   000286   FF4020000100 MOV.B   #0x20, 0x1(R15)
    889            display_3[POSIT_2] = IOT_Char_Rx[k];
   \   00028C   1F42....     MOV.W   &display_3, R15
   \   000290   DF48....0200 MOV.B   IOT_Char_Rx(R8), 0x2(R15)
    890            display_3[POSIT_3] = IOT_Char_Rx[k+POSIT_1];
   \   000296   1F42....     MOV.W   &display_3, R15
   \   00029A   DF48....0300 MOV.B   IOT_Char_Rx + 1(R8), 0x3(R15)
    891            display_3[POSIT_4] = IOT_Char_Rx[k+POSIT_2];
   \   0002A0   1F42....     MOV.W   &display_3, R15
   \   0002A4   DF48....0400 MOV.B   IOT_Char_Rx + 2(R8), 0x4(R15)
    892            display_3[POSIT_5] = IOT_Char_Rx[k+POSIT_3];
   \   0002AA   1F42....     MOV.W   &display_3, R15
   \   0002AE   DF48....0500 MOV.B   IOT_Char_Rx + 3(R8), 0x5(R15)
    893            display_3[POSIT_6] = IOT_Char_Rx[k+POSIT_4];
   \   0002B4   1F42....     MOV.W   &display_3, R15
   \   0002B8   DF48....0600 MOV.B   IOT_Char_Rx + 4(R8), 0x6(R15)
    894            display_3[POSIT_7] = IOT_Char_Rx[k+POSIT_5];
   \   0002BE   1F42....     MOV.W   &display_3, R15
   \   0002C2   DF48....0700 MOV.B   IOT_Char_Rx + 5(R8), 0x7(R15)
    895            display_3[POSIT_8] = ' ';
   \   0002C8   1F42....     MOV.W   &display_3, R15
   \   0002CC   FF4020000800 MOV.B   #0x20, 0x8(R15)
    896            display_3[POSIT_9] = ' '; 
   \   0002D2   1F42....     MOV.W   &display_3, R15
   \   0002D6   FF4020000900 MOV.B   #0x20, 0x9(R15)
    897            Display_Process();
   \   0002DC   ........     CALLA   #Display_Process
    898            X_Seconds_Delay(POSIT_2); 
   \   0002E0   2C43         MOV.W   #0x2, R12
   \   0002E2   ........     CALLA   #X_Seconds_Delay
    899            Five_Msec_Delay(BIG_DELAY);
   \   0002E6   3C40F401     MOV.W   #0x1f4, R12
   \   0002EA   ........     CALLA   #Five_Msec_Delay
    900            
    901            display_4 = "          ";
   \   0002EE   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    902            display_4[POSIT_0] = ' '; 
   \   0002F4   1F42....     MOV.W   &display_4, R15
   \   0002F8   FF4020000000 MOV.B   #0x20, 0(R15)
    903            display_4[POSIT_1] = ' ';
   \   0002FE   1F42....     MOV.W   &display_4, R15
   \   000302   FF4020000100 MOV.B   #0x20, 0x1(R15)
    904            display_4[POSIT_2] = IOT_Char_Rx[k+POSIT_6];
   \   000308   1F42....     MOV.W   &display_4, R15
   \   00030C   DF48....0200 MOV.B   IOT_Char_Rx + 6(R8), 0x2(R15)
    905            display_4[POSIT_3] = IOT_Char_Rx[k+POSIT_7];
   \   000312   1F42....     MOV.W   &display_4, R15
   \   000316   DF48....0300 MOV.B   IOT_Char_Rx + 7(R8), 0x3(R15)
    906            display_4[POSIT_4] = IOT_Char_Rx[k+POSIT_8];
   \   00031C   1F42....     MOV.W   &display_4, R15
   \   000320   DF48....0400 MOV.B   IOT_Char_Rx + 8(R8), 0x4(R15)
    907            display_4[POSIT_5] = IOT_Char_Rx[k+POSIT_9];
   \   000326   1F42....     MOV.W   &display_4, R15
   \   00032A   DF48....0500 MOV.B   IOT_Char_Rx + 9(R8), 0x5(R15)
    908            display_4[POSIT_6] = IOT_Char_Rx[k+POSIT_10];
   \   000330   1F42....     MOV.W   &display_4, R15
   \   000334   DF48....0600 MOV.B   IOT_Char_Rx + 10(R8), 0x6(R15)
    909            display_4[POSIT_7] = IOT_Char_Rx[k+POSIT_11];
   \   00033A   1F42....     MOV.W   &display_4, R15
   \   00033E   DF48....0700 MOV.B   IOT_Char_Rx + 11(R8), 0x7(R15)
    910            display_4[POSIT_8] = IOT_Char_Rx[k+POSIT_12];
   \   000344   1F42....     MOV.W   &display_4, R15
   \   000348   DF48....0800 MOV.B   IOT_Char_Rx + 12(R8), 0x8(R15)
    911            display_4[POSIT_9] = ' ';
   \   00034E   1F42....     MOV.W   &display_4, R15
   \   000352   FF4020000900 MOV.B   #0x20, 0x9(R15)
    912            Display_Process();
   \   000358   ........     CALLA   #Display_Process
    913            
    914            // Re-enable RX interrupt
    915            UCA1IE |= UCRXIE;                 
   \   00035C   92D3FA05     BIS.W   #0x1, &0x5fa
    916            Five_Msec_Delay(BIG_DELAY);
   \   000360   3C40F401     MOV.W   #0x1f4, R12
   \   000364   ........     CALLA   #Five_Msec_Delay
    917            
    918            // Waiting until "OK" has been received 
    919            i = POSIT_0;
   \   000368   0A43         MOV.W   #0x0, R10
    920            while(IOT_Char_Rx[i] != 'O')i++; 
   \                     ??Reconnect_4:
   \   00036A   FA904F00.... CMP.B   #0x4f, IOT_Char_Rx(R10)
   \   000370   0224         JEQ     ??Reconnect_11
   \   000372   1A53         ADD.W   #0x1, R10
   \   000374   FA3F         JMP     ??Reconnect_4
    921          }
   \                     ??Reconnect_11:
   \   000376   3817         POPM.W  #0x4, R11
   \   000378   1001         RETA
   \   00037A                REQUIRE _A_PJOUT_L
   \   00037A                REQUIRE _A_UCA1IE_L
    922          
    923          //------------------------------------------------------------------------------
    924          //      Function name: Socket
    925          //      Description: Socket-Server connection    
    926          //      Global variables: 
    927          //      Local variables:  
    928          //      Return: VOID
    929          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
    930          void Socket(void){
   \                     Socket:
   \   000000   0A12         PUSH.W  R10
   \   000002   B1002800     SUBA    #0x28, SP
    931            int i = POSIT_0;
   \   000006   0A43         MOV.W   #0x0, R10
    932            char socket[SMALL_RING_SIZE] = "AT+S.SOCKD=9001\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.SOCKD=9001\\r">`, R14
   \   00000E   3D402800     MOV.W   #0x28, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    933            
    934            // initializing receive buffer
    935            for(int j=POSIT_0; j<SMALL_RING_SIZE; j++)IOT_Char_Rx[j]=POSIT_0;
   \   000016   0F43         MOV.W   #0x0, R15
   \                     ??Socket_0:
   \   000018   3F902800     CMP.W   #0x28, R15
   \   00001C   0434         JGE     ??Socket_1
   \   00001E   CF43....     MOV.B   #0x0, IOT_Char_Rx(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   F93F         JMP     ??Socket_0
    936            
    937            // Transmitting commands 
    938            while(ALWAYS){
    939              UCA1TXBUF = UCA0TXBUF = socket[i]; 
   \                     ??Socket_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6E4F         MOV.B   @R15, R14
   \   00002C   4E4E         MOV.B   R14, R14
   \   00002E   824ECE05     MOV.W   R14, &0x5ce
   \   000032   824EEE05     MOV.W   R14, &0x5ee
    940              if(socket[i] == CAR_RET)break; 
   \   000036   0F4A         MOV.W   R10, R15
   \   000038   0F51         ADD.W   SP, R15
   \   00003A   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000040   0520         JNE     ??Socket_3
    941              Five_Msec_Delay(POSIT_1); 
    942              i++;
    943            }
    944            Five_Msec_Delay(POSIT_5);
   \   000042   3C400500     MOV.W   #0x5, R12
   \   000046   ........     CALLA   #Five_Msec_Delay
    945          }
   \   00004A   053C         JMP     ??Socket_2
   \                     ??Socket_3:
   \   00004C   1C43         MOV.W   #0x1, R12
   \   00004E   ........     CALLA   #Five_Msec_Delay
   \   000052   1A53         ADD.W   #0x1, R10
   \   000054   E83F         JMP     ??Socket_1
   \                     ??Socket_2:
   \   000056   A1002800     ADDA    #0x28, SP
   \   00005A   3A41         POP.W   R10
   \   00005C   1001         RETA
   \   00005E                REQUIRE _A_UCA1TXBUF_L
   \   00005E                REQUIRE _A_UCA0TXBUF_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ">`:
   \   000000   2000         DC8 " "

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Waiting">`:
   \   000000   57616974696E DC8 "Waiting"
   \            6700        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "For">`:
   \   000000   466F7200     DC8 "For"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Input...">`:
   \   000000   496E7075742E DC8 "Input..."
   \            2E2E00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Forward">`:
   \   000000   466F72776172 DC8 "Forward"
   \            6400        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Reverse">`:
   \   000000   526576657273 DC8 "Reverse"
   \            6500        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CW">`:
   \   000000   435700       DC8 "CW"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CCW">`:
   \   000000   43435700     DC8 "CCW"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Left">`:
   \   000000   4C65667400   DC8 "Left"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Turn">`:
   \   000000   5475726E00   DC8 "Turn"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Right">`:
   \   000000   526967687400 DC8 "Right"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "R">`:
   \   000000   5200         DC8 "R"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SSIDTXT=ncsu\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SSIDTXT=ncsu\015"
   \            534944545854
   \            3D6E6373750D
   \            00          
   \   000013   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \            000000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Set SSID">`:
   \   000000   536574205353 DC8 "Set SSID"
   \            494400      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SSIDTXT\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SSIDTXT\015"
   \            534944545854
   \            0D00        
   \   00000E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00000000    
   \   00001E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Get SSID">`:
   \   000000   476574205353 DC8 "Get SSID"
   \            494400      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=ip_hostname...">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=ip_hostname,ECE-306_02_R\015"
   \            4346473D6970
   \            5F686F73746E
   \            616D652C4543
   \            452D3330365F
   \            30325F520D00
   \   000024   00000000     DC8 0, 0, 0, 0

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Set">`:
   \   000000   53657400     DC8 "Set"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "hostname">`:
   \   000000   686F73746E61 DC8 "hostname"
   \            6D6500      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=ip_hostname\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=ip_hostname\015"
   \            4346473D6970
   \            5F686F73746E
   \            616D650D00  
   \   000017   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            0000000000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Get">`:
   \   000000   47657400     DC8 "Get"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_priv_m...">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=wifi_priv_mode,0\015"
   \            4346473D7769
   \            66695F707269
   \            765F6D6F6465
   \            2C300D00    
   \   00001C   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "network">`:
   \   000000   6E6574776F72 DC8 "network"
   \            6B00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "privacy">`:
   \   000000   707269766163 DC8 "privacy"
   \            7900        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_priv_m...">_1`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=wifi_priv_mode\015"
   \            4346473D7769
   \            66695F707269
   \            765F6D6F6465
   \            0D00        
   \   00001A   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            0000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_mode,1\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=wifi_mode,1\015"
   \            4346473D7769
   \            66695F6D6F64
   \            652C310D00  
   \   000017   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            0000000000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "mode">`:
   \   000000   6D6F646500   DC8 "mode"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_mode\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=wifi_mode\015"
   \            4346473D7769
   \            66695F6D6F64
   \            650D00      
   \   000015   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT&W\\r">`:
   \   000000   415426570D00 DC8 "AT&W\015"
   \   000006   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00000000    
   \   000016   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Save">`:
   \   000000   5361766500   DC8 "Save"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "settings">`:
   \   000000   73657474696E DC8 "settings"
   \            677300      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CFUN=1\\r">`:
   \   000000   41542B434655 DC8 "AT+CFUN=1\015"
   \            4E3D310D00  
   \   00000B   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00000000    
   \   00001B   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Reset">`:
   \   000000   526573657400 DC8 "Reset"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "module">`:
   \   000000   6D6F64756C65 DC8 "module"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.ROAM\\r">`:
   \   000000   41542B532E52 DC8 "AT+S.ROAM\015"
   \            4F414D0D00  
   \   00000B   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00000000    
   \   00001B   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Roaming...">`:
   \   000000   526F616D696E DC8 "Roaming..."
   \            672E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.STS=ip_ipaddr\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.STS=ip_ipaddr\015"
   \            54533D69705F
   \            697061646472
   \            0D00        
   \   000014   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \            0000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.PING= 152.14.99....">`:
   \   000000   41542B532E50 DC8 "AT+S.PING= 152.14.99.126\015"
   \            494E473D2031
   \            35322E31342E
   \            39392E313236
   \            0D00        
   \   00001A   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            0000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Checking">`:
   \   000000   436865636B69 DC8 "Checking"
   \            6E6700      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Pin...">`:
   \   000000   50696E2E2E2E DC8 "Pin..."
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Pin">`:
   \   000000   50696E00     DC8 "Pin"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Approved">`:
   \   000000   417070726F76 DC8 "Approved"
   \            656400      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Complete">`:
   \   000000   436F6D706C65 DC8 "Complete"
   \            746500      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Connecting">`:
   \   000000   436F6E6E6563 DC8 "Connecting"
   \            74696E6700  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "to">`:
   \   000000   746F00       DC8 "to"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "network...">`:
   \   000000   6E6574776F72 DC8 "network..."
   \            6B2E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Successful">`:
   \   000000   537563636573 DC8 "Successful"
   \            7366756C00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "connection">`:
   \   000000   636F6E6E6563 DC8 "connection"
   \            74696F6E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SOCKD=9001\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SOCKD=9001\015"
   \            4F434B443D39
   \            3030310D00  
   \   000011   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \            0000000000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     46   Check_Status
       46   -> Five_Msec_Delay
       46 ?CopyMemoryBytes
     20   Check_Str
       20   -> Display_Process
       12   -> Five_Msec_Delay
       20   -> Five_Msec_Delay
       20   -> Out_To_LCD
       20   -> X_Seconds_Delay
       20   -> lcd_4line
     54   Get_HostN
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Get_NetM
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Get_NetP
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Get_SSID
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     14   IOT_config
       14   -> Display_Process
       14   -> Five_Msec_Delay
        6   -> Get_HostN
        6   -> Get_NetM
        6   -> Get_NetP
        6   -> Get_SSID
       14   -> Out_To_LCD
        6   -> Ping
        6   -> Reconnect
        6   -> Save_All
        6   -> Set_HostN
        6   -> Set_NetM
        6   -> Set_NetP
       14   -> Set_SSID
        6   -> Socket
        6   -> Switches_Process
        6   -> X_Seconds_Delay
       14   -> lcd_4line
     20   Listen
       12   -> All_Off
       12   -> Check_Str
       20   -> Display_Process
       20   -> Five_Msec_Delay
       12   -> Left_Forward_Off
       12   -> Left_Forward_On
       12   -> Left_Reverse_Off
       12   -> Left_Reverse_On
       20   -> Out_To_LCD
       12   -> Right_Forward_Off
       12   -> Right_Forward_On
       12   -> Right_Reverse_Off
       12   -> Right_Reverse_On
     46   Ping
       46   -> Five_Msec_Delay
       46 ?CopyMemoryBytes
     28   Reconnect
       12   -> Check_Status
       12   -> Display_Process
       20   -> Display_Process
       28   -> Display_Process
       12   -> Five_Msec_Delay
       28   -> Five_Msec_Delay
       20   -> Get_SSID
       12   -> Init_LCD
       20   -> Out_To_LCD
       28   -> Out_To_LCD
       12   -> Reset_All
       12   -> X_Seconds_Delay
       20   -> X_Seconds_Delay
     54   Reset_All
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Roam
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Save_All
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Set_HostN
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Set_NetM
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Set_NetP
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     54   Set_SSID
       54   -> Display_Process
       46   -> Five_Msec_Delay
       54   -> Out_To_LCD
       46 ?CopyMemoryBytes
     46   Socket
       46   -> Five_Msec_Delay
       46 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  ?<Constant " ">
       1  ?<Constant "">
      40  ?<Constant "AT&W\r">
      40  ?<Constant "AT+CFUN=1\r">
      40  ?<Constant "AT+S.PING= 152.14.99....">
      40  ?<Constant "AT+S.ROAM\r">
      40  ?<Constant "AT+S.SCFG=ip_hostname...">
      40  ?<Constant "AT+S.SCFG=ip_hostname\r">
      40  ?<Constant "AT+S.SCFG=wifi_mode,1\r">
      40  ?<Constant "AT+S.SCFG=wifi_mode\r">
      40  ?<Constant "AT+S.SCFG=wifi_priv_m...">
      40  ?<Constant "AT+S.SCFG=wifi_priv_m...">_1
      40  ?<Constant "AT+S.SOCKD=9001\r">
      40  ?<Constant "AT+S.SSIDTXT=ncsu\r">
      40  ?<Constant "AT+S.SSIDTXT\r">
      40  ?<Constant "AT+S.STS=ip_ipaddr\r">
       9  ?<Constant "Approved">
       4  ?<Constant "CCW">
       3  ?<Constant "CW">
       9  ?<Constant "Checking">
       9  ?<Constant "Complete">
      11  ?<Constant "Connecting">
       4  ?<Constant "For">
       8  ?<Constant "Forward">
       9  ?<Constant "Get SSID">
       4  ?<Constant "Get">
       9  ?<Constant "Input...">
       5  ?<Constant "Left">
       4  ?<Constant "Pin">
       7  ?<Constant "Pin...">
       2  ?<Constant "R">
       6  ?<Constant "Reset">
       8  ?<Constant "Reverse">
       6  ?<Constant "Right">
      11  ?<Constant "Roaming...">
       5  ?<Constant "Save">
       9  ?<Constant "Set SSID">
       4  ?<Constant "Set">
      11  ?<Constant "Successful">
       5  ?<Constant "Turn">
       8  ?<Constant "Waiting">
      11  ?<Constant "connection">
       9  ?<Constant "hostname">
       5  ?<Constant "mode">
       7  ?<Constant "module">
       8  ?<Constant "network">
      11  ?<Constant "network...">
       8  ?<Constant "privacy">
       9  ?<Constant "settings">
       3  ?<Constant "to">
      94  Check_Status
     226  Check_Str
     130  Get_HostN
     130  Get_NetM
     130  Get_NetP
     128  Get_SSID
     358  IOT_config
     670  Listen
      94  Ping
     890  Reconnect
     130  Reset_All
     130  Roam
     130  Save_All
     130  Set_HostN
     130  Set_NetM
     130  Set_NetP
     130  Set_SSID
      94  Socket
       2  _A_PBIN_L
       2  _A_PJOUT_L
       2  _A_UCA0TXBUF_L
       2  _A_UCA1IE_L
       2  _A_UCA1TXBUF_L

 
 3 854 bytes in segment CODE
    10 bytes in segment DATA16_AN
   815 bytes in segment DATA16_C
 
 3 854 bytes of CODE  memory
   815 bytes of CONST memory
     0 bytes of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: none
