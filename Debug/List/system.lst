###############################################################################
#
# IAR C/C++ Compiler V8.10.3.1087/W32 for MSP430          17/Feb/2025  14:25:10
# Copyright 1996-2023 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for MSP430, Evaluation version 8.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\rache\Desktop\BareMetal_IoTCar\system.c
#    Command line  =  
#        -f C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\system.r43.rsp
#        (C:\Users\rache\Desktop\BareMetal_IoTCar\system.c -lC
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\ -o
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large) --dependencies=n
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\system.r43.iar_deps
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\List\system.lst
#    Object file   =  
#        C:\Users\rache\Desktop\BareMetal_IoTCar\Debug\Obj\system.r43
#
###############################################################################

C:\Users\rache\Desktop\BareMetal_IoTCar\system.c
      1          //******************************************************************************
      2          //   Name: system.c
      3          //   Author: Rachel E. Williams
      4          //   Date Created: September 9 2015 (9/9/2015)
      5          //   Last Updated: 2/17/2025
      6          //   Description: This file handles system-wide configuration 
      7          //   Originally built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      8          //   Updated revisions built with IAR Embedded Workbench - MSP430 V8.10.3
      9          //******************************************************************************  
     10          
     11          // #includes 
     12          #include "msp430.h"
     13          #include "functions.h"
     14          
     15          // Global Variables 
     16          
     17          // Constant Variables 
     18          
     19          //------------------------------------------------------------------------------
     20          // System Configurations
     21          // Description: Tells the compiler to provide the value in reg as an input to an 
     22          //              inline assembly block.  Even though the block contains no 
     23          //              instructions, the compiler may not optimize it away, and is 
     24          //              told that the value may change and should not be relied upon.
     25          //------------------------------------------------------------------------------
     26          
     27          /*
     28          inline void READ_AND_DISCARD(unsigned int reg) __attribute__((always_inline));
     29          void READ_AND_DISCARD(unsigned int reg){
     30            asm volatile ("" : "=m" (reg) : "r" (reg));
     31          }
     32          */
     33          
     34          //inline void enable_interrupts(void) __attribute__((always_inline));

   \                                 In  segment CODE, align 2
     35          void enable_interrupts(void){
   \                     enable_interrupts:
     36            __bis_SR_register(GIE);              // enable interrupts
   \   000000   0343         NOP
   \   000002   32D2         BIS.W   #0x8, SR
     37          //  asm volatile ("eint \n");
     38          }
   \   000004   1001         RETA
     39          
     40          /*
     41          inline void disable_interrupts(void) __attribute__((always_inline));
     42          void disable_interrupts(void){
     43          //  asm volatile ("dint \n");
     44          }
     45          */

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  enable_interrupts

 
 6 bytes in segment CODE
 
 6 bytes of CODE memory

Errors: none
Warnings: none
